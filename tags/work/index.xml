<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>work on wrfly&#39;s blog</title>
    <link>https://wrfly.kfd.me/tags/work/</link>
    <description>Recent content in work on wrfly&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 30 May 2020 23:12:46 +0800</lastBuildDate>
    
	<atom:link href="https://wrfly.kfd.me/tags/work/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ML-Feature-Platform</title>
      <link>https://wrfly.kfd.me/posts/ml-feature-platform/</link>
      <pubDate>Sat, 30 May 2020 23:12:46 +0800</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/ml-feature-platform/</guid>
      <description>前言 大概从去年十二月份，领导们想做这样一件事情，重构一下算法组fetch feature的方法，当时是用的codis，用pb encode了一个大的结构体，结构体里包含了很多feature。当小组成员越来越多，模型越来越多，数据越来越多的时候，结构体里面的feature也越来越多，导致不管是添加新的feature还是删除不用的feature都非常麻烦，甚至都不知道哪些feature在用，哪些不用。渐渐的就变成了一座山。
然后我半路加入了讨论，一开始也是非常懵逼，都不知道他们在说什么，直到等听过一遍代码之后才有了大概的了解，开始着手设计新的方案。
大概花了一周的时间去设计：
 数据还是存在Redis里面，从Codis换成了Cache Cloud； 通过一个Config Server来  配置模型的feature，统一管理 配置Redis的地址，分国家，分feature类别 配置生成feature数据的job，包括数据源，写入地址等等  重构了生成日志的方式，这里的日志是“请求”和“返回的数据”，用来训练模型 重构了数据的存储方式，将大的pb结构拆成一个一个的hset，方便增删  设计上个人觉得没什么问题，领导也表示由我主导，但实际上我的话语权并不高，事情的发展也不在我的掌控之中，最终的效果就会有一些出入。更不用说不在我负责范围内的事情了，撇开不谈。
上周终于把全部国家的Redis资源申请到了，所以个人认为这件事情也有了一个阶段性成果（五个月？），所以记录一下这个项目和中间遇到的一些问题，希望能给以后的自己有所启发，或者反思。
思路 名词定义 Category - 表示一类的feature，比如Item Category，Shop Category，同一个Category中的QueryKey是相同的
QueryKey - 如何从Redis中读取feature，以及如何写入，其实就是Redis的Key。可以分为 ItemID，ShopID，UserID，QueryHash等等，以及他们之间的互相组合。
Config Server - 存储和管理Redis的地址，不同的Category不同的国家用哪个Redis，因为写入和读取都需要用到，但是写入和读取又不在同一个项目里，所以不能配置文件的方式保存。这个Server还会管理每个模型用到的feature set，跑map job的时候的配置，还有一些乱七八糟的东西。其实就是一个配置中心，字如其名。解耦用的。
Feature Set - 包含了要获取哪一些feature，这些feature分别在哪些category里。
问题 &amp;amp; 优化 1. 序列化 核心重构就是把存储的数据结构给换了，从pb structure转换成redis的kv，还是hset。因为client还是想拿到一个结构体，所以首先要面临的就是如何读取redis中的数据，并转换成相应的结构体的问题。
旧方案用 pb.Unmarshal 就可以了，但为了让数据读取更灵活（有些模型只需要pb结构里的某几个feature，但因为是整存整取的，所以只能全部取出，再挑出自己模型需要的数据，相应的就给redis带来了压力，不仅是带宽压力，更是Redis的IO压力，以及反序列化的CPU压力），我们就得转换从redis中读取到的KV。
说来也巧，一年前写过一个从环境变量转换成golang structure的一个lib，曾经给ES client用过，拿到这里来刚刚好，无非是数据源从env变成了redis kv，核心方法还是一样的，而且feature的格式是golang的基础类型，以及基础类型的array，完全支持。
kv -&amp;gt; struct 就算解决了。而且比json还要快。
2. Redis Key 因为我们的feature全是用redis key组织的，所以redis中就有非常多的key，此时key的大小就非常重要，能省一个字节，就省一个字节。
一开始是用 SET item:123456:name iPhone, SET item:123456:price 1000000 这种方式组织的，但Redis在实现key的时候，会额外占用一些空间，所以key越少越好，越紧凑越好，然后就演化成了 HSET item:12345 name iPhone, HSET item:12345 price 1000000, 但还是很大，我连这个 item， name， price 都不想要。于是又演化了一版，将这些定义存放到了Config Server里面，给每个category编了号，对应的，给每个category中的feature也编了号，这里唯一的缺陷是编号只能累加（或者删除旧的编号，人工赋值新的也行，但最后还是用autoincrease了事儿）。</description>
    </item>
    
    <item>
      <title>An-Accident-Triggered-by-a-String</title>
      <link>https://wrfly.kfd.me/posts/an-accident-triggered-by-a-string/</link>
      <pubDate>Tue, 22 Jan 2019 21:43:01 +0800</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/an-accident-triggered-by-a-string/</guid>
      <description>今天下午健身回来想着注册线上的search server到zk，让prometheus去拉metrics，然后由于申请机器权限的系统经常性的抽风，申请登录机器一直不成功（老牛鼻子问题了，他们就是不修），然后就想直接更新zk的数据，反正脚本也是这样，然后就到了consule的UI上（我也不知道为啥consul的UI跟ZK的数据是连着的），直接创建对应的key。
创建完成之后发现并没有卵用，过了一会儿就被打岔喊道了楼上去（现在想起来，如果不上去的话会不会自己就把key给删了？但大概率会忘掉！），说了一会儿之后正巧他们出故障了，隐隐约约听到了我们组的名字，妈的瞬间就精神了，这不是我刚才建的key吗，卧槽我是不是闯祸了？
仔细听下去，果真。日。
事情的起因是我想注册我们的search server到ZK，让prometheus去拉数据。
经过是没有登录到注册zk的机器上，然后就手工写错了注册的path和value。
结果导致平台组负责服务发现的程序崩溃？
程序期待一个JSON，我写了一个string，然后程序就崩溃了。贰叁叁。
最终导致订单系统停止服务五十分钟。（讲道理五十分钟才解决这种故障也是……）
然后群里领导们就在讨论如何避免以后类似问题的发生，说如何限制zk的写入，如何提交ticket，如何更新服务发现等等等等。
我就想，这难道没有work flow和programer的责任吗，每个人都能写线上的ZK不太好吧？这么简单的异常，程序没有正确处理而是直接崩溃不好吧？花费五十分钟还顺带回滚服务（当然没卵用了也）才解决问题也不好吧？最终我（导火索）如果没有恰好站在旁边背锅，也发现不了是怎么引起的bug也不太对吧？
洋洋洒洒都在讨论auth的问题，真是，醉了。
服务发现用ZK本来就值得吐槽了，而且各种服务都写ZK，不区分国家和服务类型，把ZK当银弹用，还是一颗，这么明显的问题都没人提出来，也没人说程序写的有问题，（这么关键的程序，感觉像是随便写写的），深深的觉着领导层有点本末倒置。
普林西普的刺杀引发了一战，但讲道理，让普林西普背一战的锅就说不过去。当然也没人让我背锅，我只是觉着导火索就不应该存在，把潜在的问题扼杀在摇篮中是最好的。因为这次可能是我写string，下次可能就是程序写int，在下次可能就是黑客直接递归删key了，暴露出这么多问题，一个auth能解决？一个disable能解决？
服务发现本来就很复杂，etcd都能被打挂，zk也不是万能钥匙啊，况且还不分区。这么关键的核心服务连这种异常都hold不住，也难怪天天修bug。
我肯定是要被批评的，因为我写的key嘛，就像上次99时候DNS挂了，一个更改防火墙的DBA背锅一样。
几点经验教训：
 对核心数据的权限控制：什么样的人能干什么样的事儿，该干什么样的事儿要有明确的划分。 对数据的隔离和分区：不要把鸡蛋放在一个篮子里，老生常谈了。 核心程序的code review和至少80%的单元测试：不要让这么低级的异常把整个系统搞挂。 关键数据的备份要做好：实在解决不了问题咱回滚数据行不行？ 还是告警，还是日志，错误处理不是说说那么简单的。 服务发现是个大事儿：别用zk，用etcd。 哪怕是内部服务，也不能完全可信，尤其是带有网络调用的，数据验证是基本操作。 出问题是好事儿，跌倒也是好事儿，但出了问题不总结就不是好事儿，总结不到位也不是好事儿，就像明明是脚上扎了钉子，却一直想办法如何修路。早点暴露问题就能早点修复，以免在更严重的时期触发问题；早点跌倒就会早点反思，而不是拖着一只被扎穿的脚彳亍。 最重要的一点也是针对我的一点，没事儿别瞎搞，对于不了解的东西要如履薄冰，如坐针毡，没准你就是最后一块被抽掉的积木。  </description>
    </item>
    
    <item>
      <title>Change-My-Attitude-Towards-Work</title>
      <link>https://wrfly.kfd.me/posts/change-my-attitude-towards-work/</link>
      <pubDate>Fri, 28 Dec 2018 21:31:54 +0800</pubDate>
      
      <guid>https://wrfly.kfd.me/posts/change-my-attitude-towards-work/</guid>
      <description>我信奉真理胜过一切。
 我是一个嫉恶如仇的人，眼里容不下一点沙子，看不惯别人错误的行为，看不下项目里垃圾的代码。
我是一个程序员，这就意味着我以写代码为生，我用键盘敲出代码，为PM实现功能，给公司带来利益，以换取微薄的收入，支撑我生活所需的食物和水。但与此同时，我又跟别的程序员不太一样，我对代码质量的要求特别高，我怕犯错，每当有别人指出我的错误，我就谨小慎微，毕恭毕敬，有则改之，无则加勉，因为要对自己的每一行代码负责，所以每写一点东西，都会写上注释，文档，不确定的函数写好单元测试，还安装了拼写插件，以检查英语单词的拼写错误，代码超过两遍复用就抽象，类型定义和命名仔细斟酌，不写无用的代码，不写复杂的代码，如果我的代码别人看不懂，那么我首先要承担一半责任，我还对CI/CD特别挑剔，对commit message也异常执着，项目里总是要写一个Makefile和README，每个包里都用interface定义好接口，中规中矩，兢兢业业，如履薄冰，生怕自己的代码被别人鄙视，成为别人眼中的垃圾代码。
这种习惯是从小就养成的，每当错了一道题，如果是第二遍犯错，内心就会很自责，承受不住内心的拷问，所以我会把错误记在本子上，记在脑子里，就差刻在手臂上，告诫自己以后不要再犯。近乎自负。
可是并不是每个人都如此的对待错误，甚至不认为是错误。他们有他们自己的价值观，工作观，代码观。我不应该将自己苛刻的代码洁癖强加到别人身上，哪怕，写的是同一个项目里的代码。他们不写文档，不写注释，不写测试，不做抽象和重构，只是他们自己的事，跟任何人（除了项目负责人，因为他要合并PR和review代码）无关，当然其他人也要review代码，但，“严于律己，宽以待人”这句老祖宗留下来的经验教训应时刻被牢记，看到不爽的，睁一只眼闭一只眼也就过去了，生那个气干嘛。
就像有人喜欢把家里收拾的整整齐齐，干干净净；有人就是喜欢乱扔袜子，不打扫卫生，不整理衣柜；咱不能看见别人没擦嘴就强行按住人家给他擦嘴不是？
我对待生活的洁癖已经好一些了，但是对与代码的洁癖，还需要缓解缓解，不能因为别人写的不好还不改正就批评他，一是没资格，二是犯不上。不是有首歌：小燕子，穿花衣，年年春天来这里，我问燕子为什么，燕子说，管好你自己。
工作而已，完成任务就行了，还真以为有“全局观”，“大局意识”，“主人翁意识”，老板就会给你加钱？老板认识你是谁呐？要想升职加薪，跳槽才是最有效的方式，除此之外，就是站队和吹逼。
每天上班，下班，规划好工作，写好自己的代码就完事儿了，再怎么加班领导也不会给你发红包啊，每个公司都有自己的薪酬体系，哪那么容易啊。还有，没到手的承诺，千万别信，就像前女友说的爱你一样。
想到这里，心里就开朗了，工作嘛，没必要锱铢必较，“能者多劳”是资本家骗小孩子的，提高自身修养，跳出自己的安逸圈，做更好的自己，才是王道。
不懂的就问，不会的就学，合理安排自己的时间，一门心思扑在工作上不是啥值得骄傲的事儿。
加班？放他娘的臭狗屁！</description>
    </item>
    
  </channel>
</rss>